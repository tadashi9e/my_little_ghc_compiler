% -*- coding:utf-8-unix; mode:prolog -*-
% ----------------------------------------------------------------------
% builtin predicates
% ----------------------------------------------------------------------

fail :-
    inline('{'),
    inline('    MACRO_fail;'),
    inline('}').

call(Goal) :- '__call__'(Goal).

'__call__'(Goal) :-
    inline('{'),
    inline('  MACRO_wait(reg::in(1));'),
    inline('  Q q = vm->in[1];'),
    inline('  const TAG_T tag = tag_of(q);'),
    inline('  if (tag == TAG_ATOM) {'),
    inline('    MACRO_activate;'),
    inline('    const int pc = prog->query_entry_point(q);'),
    inline('    MACRO_execute(pc, 0);'),
    inline('  } else if (tag == TAG_STR) {'),
    inline('    MACRO_activate;'),
    inline('    A* structure = ptr_of<A>(q);'),
    inline('    Q g = structure[0].load();'),
    inline('    const int pc = prog->query_entry_point(g);'),
    inline('    if (pc < 0) {'),
    inline('      vm->fail();'),
    inline('      continue;'),
    inline('    }'),
    inline('    const int arity = atom_arity_of(g);'),
    inline('    MACRO_tail(2);'),
    inline('    for (int i = 1; i <= arity; ++i) {'),
    inline('      MACRO_out_constant(structure[i].load(), reg::out(i));'),
    inline('    }'),
    inline('    MACRO_execute(pc, arity);'),
    inline('  } else {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('}').

time(Goal) :-
    '__time_pre__'(Start, InferenceCount, ResumeCount),
    call(Goal)
    -> '__time_post__'(Start, InferenceCount, ResumeCount).

wait_time(Var) :-
    '__time_pre__'(Start, InferenceCount, ResumeCount),
    '__wait_time__'(Var, Start, InferenceCount, ResumeCount).
'__wait_time__'(Var, Start, InferenceCount, ResumeCount) :-
    wait(Var) |
    '__time_post__'(Start, InferenceCount, ResumeCount).
    

'__time_pre__'(Start, InferenceCount, ResumeCount) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const int64_t istart = static_cast<int64_t>(std::clock() * 1000000.0 / CLOCKS_PER_SEC);'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(istart), reg::in(1));'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(vm->inference_count), reg::in(2));'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(vm->resume_count), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').


'__time_post__'(Start, InferenceCount, ResumeCount) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const int64_t iend = static_cast<int64_t>(std::clock() * 1000000.0 / CLOCKS_PER_SEC);'),
    inline('  const int64_t istart ='),
    inline('          value_of<int64_t>(vm->in[1]);'),
    inline('  const int64_t inferences ='),
    inline('          vm->inference_count - value_of<int64_t>(vm->in[2]);'),
    inline('  const int64_t resumes ='),
    inline('          vm->resume_count - value_of<int64_t>(vm->in[3]);'),
    inline('  const double seconds = (iend - istart) / 1000000.0;'),
    inline('  std::cout << "% " << inferences << " inferences("'),
    inline('            << resumes << " times resumed), "'),
    inline('            << seconds << " CPU seconds ("'),
    inline('            << std::fixed << (inferences / seconds) << " Lips)" << std::endl;'),
    inline('  MACRO_proceed;'),
    inline('}').

atom_concat(A, B, C) :- atom(A), atom(B) | '__atom_concat_1__'(A, B, C).
atom_concat(A, B, C) :- atom(A), atom(C) | '__atom_concat_2__'(A, B, C).
atom_concat(A, B, C) :- atom(B), atom(C) | '__atom_concat_3__'(A, B, C).

'__atom_concat_1__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const std::string s1 = atom_str_of(q1);'),
    inline('  const std::string s2 = atom_str_of(q2);'),
    inline('  const std::string s = s1 + s2;'),
    inline('  const Q c = to_atom(s.c_str(), 0);'),
    inline('  vm->unify(c, vm->in[3]);'),
    inline('  MACRO_proceed;'),
    inline('}').
'__atom_concat_2__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q3 = vm->in[3];'),
    inline('  const std::string s1 = atom_str_of(q1);'),
    inline('  const std::string s3 = atom_str_of(q3);'),
    inline('  if (s1.length() > s3.length()) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  const size_t i = s1.length();'),
    inline('  if (s3.substr(0, i) != s1) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  const std::string s2 = s3.substr(i);'),
    inline('  const Q c = to_atom(s2.c_str(), 0);'),
    inline('  vm->unify(c, vm->in[2]);'),
    inline('  MACRO_proceed;'),
    inline('}').
'__atom_concat_3__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const Q q3 = vm->in[3];'),
    inline('  const std::string s2 = atom_str_of(q2);'),
    inline('  const std::string s3 = atom_str_of(q3);'),
    inline('  if (s2.length() > s3.length()) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  const size_t i = s2.length();'),
    inline('  if (s3.substr(i) != s2) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  const std::string s1 = s3.substr(0, i);'),
    inline('  const Q c = to_atom(s1.c_str(), 0);'),
    inline('  vm->unify(c, vm->in[1]);'),
    inline('  MACRO_proceed;'),
    inline('}').

atom_codes(A, Cs) :- atom(A) | '__atom_to_codes__'(A, Cs).
atom_codes(A, [C|Cs]) :- '__codes_to_atom__'(A, [C|Cs], '').
'__atom_to_codes__'(A, Cs) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q = vm->in[1];'),
    inline('  const std::string s = atom_str_of(q);'),
    inline('  const size_t h = vm->heap_publishing(s.length() * 2);'),
    inline('  for (size_t i = 0; i < s.length(); ++i) {'),
    inline('    const unsigned char c = s.at(i);'),
    inline('    vm->heap[h + i * 2].store(tagvalue<TAG_INT>(c));'),
    inline('    vm->heap[h + i * 2 + 1].store('),
    inline('            (i < s.length() - 1)'),
    inline('            ? tagptr<TAG_LIST>(&vm->heap[h + i * 2 + 2])'),
    inline('            : tagptr<TAG_NIL, Q>(0));'),
    inline('  }'),
    inline('  vm->heap_published(s.length() * 2);'),
    inline('  vm->unify(tagptr<TAG_LIST>(&vm->heap[h]), vm->in[2]);'),
    inline('  MACRO_proceed;'),
    inline('}').
'__codes_to_atom__'(A, [], Ac) :- A = Ac.
'__codes_to_atom__'(A, [C|Cs], Ac) :-
    integer(C) |
    '__atom_code_concat__'(Ac, C, Ac2),
    '__codes_to_atom__'(A, Cs, Ac2).
'__atom_code_concat__'(A, C, A2) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  std::string s = atom_str_of(q1);'),
    inline('  const unsigned char c = value_of<char>(q2);'),
    inline('  s += c;'),
    inline('  vm->unify(to_atom(s.c_str(), 0), vm->in[3]);'),
    inline('  MACRO_proceed;'),
    inline('}').
atom_chars(A, Cs) :- atom(A) | '__atom_to_chars__'(A, Cs).
atom_chars(A, [C|Cs]) :- '__chars_to_atom__'(A, Cs, C).
'__atom_to_chars__'(A, Cs) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q = vm->in[1];'),
    inline('  const std::string s = atom_str_of(q);'),
    inline('  const size_t h = vm->heap_publishing(s.length() * 2);'),
    inline('  size_t i = 0;'),
    inline('  for (size_t j = 0; j < s.length(); ++i) {'),
    inline('    const int c0 = s.at(j) & 0xff;'),
    inline('    int n = 1;'),
    inline('    if (c0 < 0x80) {'),
    inline('      n = 1;'),
    inline('    } else if (j + 2 <= s.length()) {'),
    inline('      const int c1 = s.at(j + 1) & 0xff;'),
    inline('      if (c0 - 0xc2 < 0x1e && c1 - 0x80 < 0x40) {'),
    inline('        n = 2;'),
    inline('      } else if (j + 3 <= s.length()) {'),
    inline('        const int c2 = s.at(j + 2) & 0xff;'),
    inline('        if (((c0 == 0xe0       && c1 - 0xa0 < 0x20) ||'),
    inline('             (c0 - 0xe1 < 0x0c && c1 - 0x80 < 0x40) ||'),
    inline('             (c0 == 0xed       && c1 - 0x80 < 0x20) ||'),
    inline('             (c0 - 0xee < 0x02 && c1 - 0x80 < 0x40)) && c2 - 0x80 < 0x40) {'),
    inline('          n = 3;'),
    inline('        } else if (j + 4 <= s.length()) {'),
    inline('          const int c3 = s.at(j + 3) & 0xff;'),
    inline('          if (((c0 == 0xf0       && c1 - 0x90 < 0x30) ||'),
    inline('               (c0 - 0xf1 < 0x03 && c1 - 0x80 < 0x40) ||'),
    inline('               (c0 == 0xf4       && c1 - 0x80 < 0x10)) && c2 - 0x80 < 0x40 && c3 - 0x80 < 0x40) {'),
    inline('            n = 4;'),
    inline('          }'),
    inline('        }'),
    inline('      }'),
    inline('    }'),
    inline('    const std::string s1 = ('),
    inline('            (j + n < s.length()) ? s.substr(j, n) : s.substr(j));'),
    inline('    j += n;'),
    inline('    vm->heap[h + i * 2].store(to_atom(s1.c_str(), 0));'),
    inline('    vm->heap[h + i * 2 + 1].store('),
    inline('            (j < s.length() - 1)'),
    inline('            ? tagptr<TAG_LIST>(&vm->heap[h + i * 2 + 2])'),
    inline('            : tagptr<TAG_NIL, Q>(0));'),
    inline('  }'),
    inline('  vm->heap_published(i * 2);'),
    inline('  vm->unify(tagptr<TAG_LIST>(&vm->heap[h]), vm->in[2]);'),
    inline('  MACRO_proceed;'),
    inline('}').
'__chars_to_atom__'(A, [], Ac) :- A = Ac.
'__chars_to_atom__'(A, [C|Cs], Ac) :-
    atom_concat(Ac, C, Ac2),
    '__chars_to_atom__'(A, Cs, Ac2).

atom_number(A, N) :- atom(A) | '__atom_to_number__'(A, N).
atom_number(A, N) :- integer(N) | '__number_to_atom__'(A, N).

'__atom_to_number__'(A, N) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q = vm->in[1];'),
    inline('  const std::string s = atom_str_of(q);'),
    inline('  const int64_t i = std::stoll(s);'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(i), reg::in(2));'),
    inline('  MACRO_proceed;'),
    inline('}').

'__number_to_atom__'(A, N) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q = vm->in[2];'),
    inline('  const int64_t i = value_of<int64_t>(q);'),
    inline('  const std::string s = std::to_string(i);'),
    inline('  MACRO_get_constant(to_atom(s.c_str(), 0), reg::in(1));'),
    inline('  MACRO_proceed;'),
    inline('}').

outstream([]).
outstream([C|Cs]) :- outstream(C, Cs).
outstream(open(File, Mode, Stream), Cmds) :-
    open(File, Mode, Stream), outstream(Cmds).
outstream(write(Stream, P), Cmds) :- write(Stream, P), outstream(Cmds).
outstream(write(P), Cmds) :- write(P), outstream(Cmds).
outstream(writeln(Stream, P), Cmds) :- writeln(Stream, P), outstream(Cmds).
outstream(writeln(P), Cmds) :- writeln(P), outstream(Cmds).
outstream(nl(Stream), Cmds) :- nl(Stream), outstream(Cmds).
outstream(nl, Cmds) :- nl, outstream(Cmds).

open(Src, Opts, Stream) :-
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode),
    '__open__'(Src, OFlag, OMode, Stream).
close(Stream) :-
    '__close__'(Stream).

'__open_opt_string_to_integer__'(Opts, OFlag, OMode) :-
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, 0, 0).
'__open_opt_string_to_integer__'([], OFlag, OMode, Ac1, Ac2) :-
    OFlag = Ac1, OMode = Ac2.
'__open_opt_string_to_integer__'([rdonly|Opts], OFlag, OMode, Ac1, Ac2) :-
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac2).
'__open_opt_string_to_integer__'([wronly|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 1,     % 00001
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([rdwr|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 2,     % 00002
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([creat|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 64,    % 00100
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([excl|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 128,   % 00200
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([trunc|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 512,   % 01000
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([append|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac11 := Ac1 + 1024,  % 02000
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac11, Ac2).
'__open_opt_string_to_integer__'([rusr|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 256,  % 00400
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([wusr|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 128,  % 00200
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([xusr|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 64,   % 00100
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([rgrp|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 32,   % 00040
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([wgrp|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 16,   % 00020
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([xgrp|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 8,   % 00010
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([roth|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 4,   % 00004
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([woth|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 2,   % 00002
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).
'__open_opt_string_to_integer__'([xoth|Opts], OFlag, OMode, Ac1, Ac2) :-
    Ac21 := Ac2 + 1,   % 00001
    '__open_opt_string_to_integer__'(Opts, OFlag, OMode, Ac1, Ac21).

'__open__'(Src, OFlag, Mode, Stream) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_ATOM, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(3));'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const Q q3 = vm->in[3];'),
    inline('  const std::string src = atom_str_of(q1);'),
    inline('  const int oflag = value_of<int>(q2);'),
    inline('  const int omode = value_of<int>(q3);'),
    inline('  const int fd = open(src.c_str(), oflag, omode);'),
    inline('  if (fd < 0) {'),
    inline('    vm->unify(to_atom("error", 0), vm->in[4]);'),
    inline('  } else {'),
    inline('    vm->unify(tagvalue<TAG_INT>(fd), vm->in[4]);'),
    inline('  }'),
    inline('  MACRO_proceed;'),
    inline('}').
'__close__'(Stream) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_activate;'),
    inline('  const int fd = tagvalue<TAG_INT>(vm->in[1]);'),
    inline('  close(fd);'),
    inline('}').

writeln(X) :- write(X) -> nl.
writeln(Stream, X) :- write(Stream, X), nl(Stream).

nl :- nl(1).
nl(Stream) :- integer(Stream) | '__nl__'(Stream).
'__nl__'(Stream) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const int fd = value_of<int>(q1);'),
    inline('  const std::string s = "\\n";'),
    inline('  for (size_t offset = 0; offset <  s.size();) {'),
    inline('    const ssize_t n = write(fd, s.c_str() + offset, s.size() - offset);'),
    inline('    if (n <= 0) {'),
    inline('      break;'),
    inline('    }'),
    inline('    offset += n;'),
    inline('  }'),
    inline('  MACRO_proceed;'),
    inline('}').

write(X) :- write(1, X).
write(Stream, X) :- integer(Stream) | '__write__'(Stream, X).

'__write__'(Stream, X) :- atom(X) | '__write_atom__'(Stream, X).
'__write__'(Stream, X) :- var(X) | '__write_var__'(Stream, X).
'__write__'(Stream, X) :- integer(X) | '__write_number__'(Stream, X).
'__write__'(Stream, []) :- '__write__'(Stream, '[]').
'__write__'(Stream, [A|B]) :-
    '__write__'(Stream, '[') -> '__write__'(Stream, A)
    -> '__write_list_tail__'(Stream, B) -> '__write__'(Stream, ']').
'__write__'(Stream, X) :-
    is_functor(X) |
    X =.. [F|Args]
    -> '__write__'(Stream, F) -> '__write_functor_args__'(Stream, Args).
'__write_functor_args__'(_, []) :- true.
otherwise.
'__write_functor_args__'(Stream, X) :-
    '__write__'(Stream, '(')
    -> '__write_functor_args2__'(Stream, X) -> '__write__'(Stream, ')').
'__write_functor_args2__'(_, []) :- true.
'__write_functor_args2__'(Stream, [A|B]) :-
    '__write__'(Stream, A) -> '__write_functor_tail__'(Stream, B).
'__write_functor_tail__'(Stream, []) :- true.
'__write_functor_tail__'(Stream, [A|B]) :-
    '__write__'(Stream, ',')
    -> '__write__'(Stream, A) -> '__write_functor_tail__'(Stream, B).

'__write_list_tail__'(Stream, X) :-
    var(X) | '__write__'(Stream, '|') -> '__write__'(Stream, X).
'__write_list_tail__'(_, []) :- true.
'__write_list_tail__'(Stream, [A|B]) :-
    '__write__'(Stream, ',') -> '__write__'(Stream, A)
    -> '__write_list_tail__'(Stream, B).
otherwise.
'__write_list_tail__'(Stream, X) :-
    '__write__'(Stream, '|') -> '__write__'(Stream, X).

'__write_number__'(Stream, X) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const int fd = value_of<int>(q1);'),
    inline('  const int64_t i = value_of<int64_t>(q2);'),
    inline('  const std::string s = std::to_string(i);'),
    inline('  for (size_t offset = 0; offset <  s.size();) {'),
    inline('    const ssize_t n = write(fd, s.c_str() + offset, s.size() - offset);'),
    inline('    if (n <= 0) {'),
    inline('      break;'),
    inline('    }'),
    inline('    offset += n;'),
    inline('  }'),
    inline('  MACRO_proceed;'),
    inline('}').
'__write_atom__'(Stream, X) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const int fd = value_of<int>(q1);'),
    inline('  const std::string s = atom_str_of(q2);'),
    inline('  for (size_t offset = 0; offset <  s.size();) {'),
    inline('    const ssize_t n = write(fd, s.c_str() + offset, s.size() - offset);'),
    inline('    if (n <= 0) {'),
    inline('      break;'),
    inline('    }'),
    inline('    offset += n;'),
    inline('  }'),
    inline('  MACRO_proceed;'),
    inline('}').
'__write_var__'(Stream, X) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const int fd = value_of<int>(q1);'),
    inline('  const A* a = ptr_of<A>(q2);'),
    inline('  std::stringstream ss;'),
    inline('  ss << a;'),
    inline('  const std::string s = ss.str();'),
    inline('  for (size_t offset = 0; offset <  s.size();) {'),
    inline('    const ssize_t n = write(fd, s.c_str() + offset, s.size() - offset);'),
    inline('    if (n <= 0) {'),
    inline('      break;'),
    inline('    }'),
    inline('    offset += n;'),
    inline('  }'),
    inline('  MACRO_proceed;'),
    inline('}').

integer(X) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_return;'),
    inline('}').

atom(X) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_ATOM, reg::in(1));'),
    inline('  MACRO_return;'),
    inline('}').

var(X) :-
    inline('{'),
    inline('  const Q q = vm->in[1] = deref(vm->in[1]);'),
    inline('  const TAG_T tag = tag_of(q);'),
    inline('  if (tag != TAG_REF && tag != TAG_SUS) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

is_functor(X) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_STR, reg::in(1));'),
    inline('  const Q q = vm->in[1];'),
    inline('  const TAG_T tag = tag_of(q);'),
    inline('  if (tag != TAG_STR) {'),
    inline('    vm->fail();'),
    inline('    continue;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

'=..'(F, U) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_STR, reg::in(1));'),
    inline('  MACRO_activate;'),
    inline('  const Q q = vm->in[1];'),
    inline('  A* p = ptr_of<A>(q);'),
    inline('  const Q Fun = p[0].load();'),
    inline('  const int arity = atom_arity_of(Fun);'),
    inline('  const size_t h = vm->heap_publishing((1 + arity) * 2);'),
    inline('  for (int i = 0; i <= arity; ++i) {'),
    inline('    vm->heap[h + i * 2].store(p[i].load());'),
    inline('    vm->heap[h + i * 2 + 1].store('),
    inline('      (i < arity) ? tagptr<TAG_LIST>(&vm->heap[h + i * 2 + 2]) :'),
    inline('      tagptr<TAG_NIL, Q>(0));'),
    inline('  }'),
    inline('  vm->heap_published((1 + arity) * 2);'),
    inline('  vm->unify(tagptr<TAG_LIST>(&vm->heap[h]), vm->in[2]);'),
    inline('  MACRO_proceed;'),
    inline('}').

X == Y :-
    inline('{'),
    inline('  MACRO_wait(reg::in(1));'),
    inline('  MACRO_wait(reg::in(2));'),
    inline('  Q q1 = vm->in[1];'),
    inline('  Q q2 = vm->in[2];'),
    inline('  if (!(q1 == q2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

X >= Y :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  if (!(v1 >= v2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

X =< Y :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  if (!(v1 <= v2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

X > Y :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  if (!(v1 > v2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

X < Y :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  if (!(v1 < v2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

X =:= Y :- X1 := X, Y1 := Y, X1 == Y1.

X =\= Y :- X1 := X, Y1 := Y, '__not_equal__'(X1, Y1).

'__not_equal__'(X, Y) :-
    inline('{'),
    inline('  MACRO_wait(reg::in(1));'),
    inline('  MACRO_wait(reg::in(2));'),
    inline('  Q q1 = vm->in[1];'),
    inline('  Q q2 = vm->in[2];'),
    inline('  if (!(q1 != q2)) {'),
    inline('    MACRO_fail;'),
    inline('  }'),
    inline('  MACRO_return;'),
    inline('}').

C := (A + B) :- '__add__'(A, B, C).
C := (A - B) :- '__sub__'(A, B, C).
C := (A * B) :- '__mul__'(A, B, C).
C := (A / B) :- '__div__'(A, B, C).
C := (A mod B) :- '__mod__'(A, B, C).
C := -A :- '__neg__'(A, C).
Y := X :- integer(X) | X = Y.

'__add__'(A, B, C) :- integer(A), integer(B) | '__iadd__'(A, B, C).
otherwise.
'__add__'(A, B, C) :- A1 := A, B1 := B, '__iadd__'(A1, B1, C).

'__sub__'(A, B, C) :- integer(A), integer(B) | '__isub__'(A, B, C).
otherwise.
'__sub__'(A, B, C) :- A1 := A, B1 := B, '__isub__'(A1, B1, C).

'__mul__'(A, B, C) :- integer(A), integer(B) | '__imul__'(A, B, C).
otherwise.
'__mul__'(A, B, C) :- A1 := A, B1 := B, '__imul__'(A1, B1, C).

'__div__'(A, B, C) :- integer(A), integer(B) | '__idiv__'(A, B, C).
otherwise.
'__div__'(A, B, C) :- A1 := A, B1 := B, '__idiv__'(A1, B1, C).

'__mod__'(A, B, C) :- integer(A), integer(B) | '__imod__'(A, B, C).
otherwise.
'__mod__'(A, B, C) :- A1 := A, B1 := B, '__imod__'(A1, B1, C).

'__neg__'(A, C) :- integer(A)| '__ineg__'(A, C).
otherwise.
'__neg__'(A, C) :- A1 := A, '__ineg__'(A1, C).

'__ineg__'(A, B) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v = -value_of<int64_t>(reg::in(1));'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(2));'),
    inline('  MACRO_proceed;'),
    inline('}').
'__iadd__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  const int64_t v = v1 + v2;'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').
'__isub__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  const int64_t v = v1 - v2;'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').
'__imul__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  const int64_t v = v1 * v2;'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').
'__idiv__'(A, B, C) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  const int64_t v = v1 / v2;'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').
'__imod__'(A1, B1, C) :-
    inline('{'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(1));'),
    inline('  MACRO_wait_for(TAG_INT, reg::in(2));'),
    inline('  MACRO_activate;'),
    inline('  const int64_t v1 = value_of<int64_t>(vm->in[reg::in(1)]);'),
    inline('  const int64_t v2 = value_of<int64_t>(vm->in[reg::in(2)]);'),
    inline('  const int64_t v = v1 % v2;'),
    inline('  MACRO_get_constant(tagvalue<TAG_INT>(v), reg::in(3));'),
    inline('  MACRO_proceed;'),
    inline('}').

append([], Ys, Zs) :- Zs = Ys.
append([X|Xs], Ys, [X|Zs]) :- append(Xs, Ys, Zs).
append([X|Xs], Ys, Zs) :- Zs = [X|Zs2], append(Xs, Ys, Zs2).
append(Xs, Ys, Zs) :-
    var(Xs) |
    reverse(Ys, Yr), reverse(Zs, Zr), append(Yr, Xr, Zr), reverse(Xr, Xs).

reverse(Xs, Ys) :- var(Ys) | '__reverse__'(Xs, Ys, []).
reverse(Xs, Ys) :- var(Xs) | '__reverse__'(Ys, Xs, []).
'__reverse__'([], Ys, As) :- Ys = As.
'__reverse__'([E|Xs], Ys, As) :- As2 = [E | As], '__reverse__'(Xs, Ys, As2).

nth0(N, Ls, E) :- var(E) | '__nth0__'(N, Ls, E).
nth0(N, Ls, E) :- var(N) | '__nth0_rev__'(N, Ls, E, 0).
'__nth0__'(0, [Y|_], E) :- E = Y.
otherwise.
'__nth0__'(N, [_|Ys], E) :- N1 := N - 1, '__nth0__'(N1, Ys, E).
'__nth0_rev__'(N, [E|_], E, Ac) :- N = Ac.
otherwise.
'__nth0_rev__'(N, [_|Ls], E, Ac) :-
    Ac1 := Ac + 1, '__nth0_rev__'(N, Ls, E, Ac1).
nth1(N, Ls, E) :- var(E) | N1 := N - 1, '__nth0__'(N1, Ls, E).
nth1(N, Ls, E) :- var(N) | '__nth0_rev__'(N1, Ls, E, 0), N := N1 + 1.

inference_count(Count) :- '__inference_count__'(Count).
'__inference_count__'(Count) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  vm->unify(tagvalue<TAG_INT>(vm->inference_count), vm->in[1]);'),
    inline('  MACRO_proceed;'),
    inline('}').

resume_count(Count) :- '__resume_count__'(Count).
'__resume_count__'(Count) :-
    inline('{'),
    inline('  MACRO_activate;'),
    inline('  vm->unify(tagvalue<TAG_INT>(vm->resume_count), vm->in[1]);'),
    inline('  MACRO_proceed;'),
    inline('}').

dump_to_dot(File) :- atom(File) | '__dump_to_dot__'(File).
'__dump_to_dot__'(File) :-
    inline('{'),
    inline('  const Q q = vm->in[1];'),
    inline('  const std::string s = atom_str_of(q);'),
    inline('  MACRO_activate;'),
    inline('  vm->dump_to_dot(s);'),
    inline('  MACRO_proceed;'),
    inline('}').

dump_to_dot(File, Var) :- atom(File) | '__dump_to_dot__'(File, Var).
'__dump_to_dot__'(File, Var) :-
    inline('{'),
    inline('  const Q q1 = vm->in[1];'),
    inline('  const Q q2 = vm->in[2];'),
    inline('  const std::string s = atom_str_of(q1);'),
    inline('  MACRO_activate;'),
    inline('  vm->dump_to_dot(s, q2);'),
    inline('  MACRO_proceed;'),
    inline('}').

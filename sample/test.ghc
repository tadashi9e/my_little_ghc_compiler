% -*- coding:utf-8-unix; mode:prolog -*-
test_call3 :- call(test_call3(a), X, A),
              call(test_call3(b), A, B),
              call(test_call3(c), B, C),
              call(test_call3, C, []),
              writeln(X).
test_call3(C, U, V) :-
    U = [C|V].
test_call3(U, V) :-
    U = [done|V].

test_otherwise :- test_otherwise_aux(X), X = 1.
test_otherwise_aux(X) :- X = 0 | writeln('test failed').
otherwise.
test_otherwise_aux(_) :- writeln('test success').

test_write_var :- writeln(Var).
test_write_atom :- writeln(atom).
test_write_list :- writeln([1,2,3,4,5|_]).
test_write_structure :- writeln(some(structure, and, arguments)).

test_get_structure :- X = 1 + 2 -> writeln(X).
test_set_structure :- 1 + 2 = X -> writeln(X).
test_get_list :- X = [1, 2, 3] -> writeln(X).
test_set_list :- [1, 2, 3] = X -> writeln(X).

test_check_constant :- test_check_constant_aux(1).
test_check_constant_aux(0) :- writeln('test failed(0)').
test_check_constant_aux(1) :- writeln('test success(1)').
otherwise.
test_check_constant_aux(_) :- writeln('test failed(otherwise)').

test_check_list :- test_check_list_aux([a,b]).
test_check_list_aux([x,y]) :- writeln('test failed([x,y])').
test_check_list_aux([a,b]) :- writeln('test success([a,b])').
otherwise.
test_check_list_aux(_) :- writeln('test failed(otherwise)').

test_check_nil :- test_check_nil_aux([]).
test_check_nil_aux([a,b]) :- writeln('test failed([a,b])').
test_check_nil_aux([]) :- writeln('test success([])').
otherwise.
test_check_nil_aux(_) :- writeln('test failed(otherwise)').

test_check_structure :- test_check_structure_aux(fun(a,b)).
test_check_structure_aux(fun(x,y)) :- writeln('test failed(fun(x,y))').
test_check_structure_aux(fun(a,b)) :- writeln('test success(fun(a,b))').
otherwise.
test_check_structure_aux(_) :- writeln('test failed(otherwise)').

test_wait_var :- wait_var(X), write_var(X).
wait_var(X) :- wait(X) | writeln(X).
write_var(X) :- X = 'fire'.

test_atom_concat :-
    test_atom_concat_1,
    test_atom_concat_2,
    test_atom_concat_3.

test_atom_concat_1 :-
    atom_concat(abc, def, ABCDEF),
    write('abc + def = '), write('['), write(ABCDEF), writeln(']').
test_atom_concat_2 :-
    atom_concat(abc, DEF, abcdef),
    write('abc + ['), write(DEF), writeln('] = abcdef').
test_atom_concat_3 :-
    atom_concat(ABC, def, abcdef),
    write('['), write(ABC), writeln('] + def = abcdef').

test_atom_chars :-
    test_atom_chars1,
    test_atom_chars2.
test_atom_chars1 :-
    A = 'abcdefg„ÅÇ„ÅÑ„ÅÜ„Åà„ÅäÊº¢Â≠ó‚ò∫üç∫',
    atom_chars(A, Cs),
    write(A), write(' -> '), writeln(Cs).
test_atom_chars2 :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    atom_chars(A, Cs),
    write(A), write(' <- '), writeln(Cs).

test_atom_codes :-
    test_atom_codes1,
    test_atom_codes2.
test_atom_codes1 :-
    A = 'abcdefg„ÅÇ„ÅÑ„ÅÜ„Åà„ÅäÊº¢Â≠ó‚ò∫üç∫',
    atom_codes(A, Cs),
    write(A), write(' -> '), writeln(Cs).
test_atom_codes2 :-
    Cs = [97,98,99,100,101,102,103,
          227,129,130,227,129,132,227,129,134,227,129,136,227,129,138,
          230,188,162,229,173,151,
          226,152,186,
          240,159,141,186],
    atom_codes(A, Cs),
    write(A), write(' <- '), writeln(Cs).

test_append :-
    test_append1,
    test_append2,
    test_append3.
test_append1 :-
    Xs = [a, b, c, d, e, f, g],
    Ys = [„ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    append(Xs, Ys, Zs),
    write(Xs), write(+), write(Ys), write('=['), write(Zs), writeln(']').
test_append2 :-
    Xs = [a, b, c, d, e, f, g],
    Zs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    append(Xs, Ys, Zs),
    write(Xs), write(+), write('['), write(Ys), write(']='), writeln(Zs).
test_append3 :-
    Ys = [„ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    Zs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    append(Xs, Ys, Zs),
    write('['), write(Xs), write(']+'), write(Ys), write(=), writeln(Zs).

test_reverse :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    reverse(Cs, Rs),
    writeln(Rs).
test_nth0 :-
    test_nth0_,
    test_nth0_rev_.
test_nth0_ :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    nth0(0, Cs, E0), write(' 0: ['), write(E0),
    nth0(1, Cs, E1), write('] 1: ['), write(E1),
    nth0(2, Cs, E2), write('] 2: ['), write(E2),
    nth0(3, Cs, E3), write('] 3: ['), write(E3),
    nth0(4, Cs, E4), write('] 4: ['), write(E4),
    nth0(5, Cs, E5), write('] 5: ['), write(E5), writeln(']').
test_nth0_rev_ :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    nth0(N0, Cs, a), write(' ['), write(N0), write(']: a'),
    nth0(N1, Cs, b), write(' ['), write(N1), write(']: b'),
    nth0(N2, Cs, c), write(' ['), write(N2), write(']: c'),
    nth0(N3, Cs, d), write(' ['), write(N3), write(']: d'),
    nth0(N4, Cs, e), write(' ['), write(N4), write(']: e'),
    nth0(N5, Cs, f), write(' ['), write(N5), writeln(']: f').
test_nth1 :-
    test_nth1_,
    test_nth1_rev_.
test_nth1_ :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    nth1(1, Cs, E1), write(' 1: ['), write(E1),
    nth1(2, Cs, E2), write('] 2: ['), write(E2),
    nth1(3, Cs, E3), write('] 3: ['), write(E3),
    nth1(4, Cs, E4), write('] 4: ['), write(E4),
    nth1(5, Cs, E5), write('] 5: ['), write(E5), writeln(']').
test_nth1_rev_ :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    nth1(N1, Cs, a), write(' ['), write(N1), write(']: a'),
    nth1(N2, Cs, b), write(' ['), write(N2), write(']: b'),
    nth1(N3, Cs, c), write(' ['), write(N3), write(']: c'),
    nth1(N4, Cs, d), write(' ['), write(N4), write(']: d'),
    nth1(N5, Cs, e), write(' ['), write(N5), writeln(']: e').

test_splice_suspension :-
    test_splice_suspension1(X1),
    test_splice_suspension1(X2),
    test_splice_suspension1(X3),
    X1 = X2,
    X2 = X3,
    dump_to_dot('dump/splice.dot'),
    X1 = 'test_splice_suspension'.
test_splice_suspension1(X) :- wait(X) | writeln(X).

test_calc :-
    writeln('xxx0'),
    X2 := X - 1,
    writeln('xxx1'),
    writeln(X2 := X - 1),
    %dump_to_dot('dump/calc.dot'),
    X1 := X + 1,
    writeln(X1 := X + 1),
    writeln('xxx'),
    dump_to_dot('dump/calc.dot'),
    X = 10.

do_test(X) :- write(X) -> writeln(': ') -> time(X).

main(_) :-
    do_test(test_call3),
    do_test(test_otherwise),
    do_test(test_write_var),
    do_test(test_write_atom),
    do_test(test_write_list),
    do_test(test_write_structure),
    do_test(test_get_structure),
    do_test(test_set_structure),
    do_test(test_get_list),
    do_test(test_set_list),
    do_test(test_check_constant),
    do_test(test_check_list),
    do_test(test_check_nil),
    do_test(test_check_structure),
    do_test(test_wait_var),
    do_test(test_atom_concat),
    do_test(test_atom_chars),
    do_test(test_atom_codes),
    do_test(test_append),
    do_test(test_reverse),
    do_test(test_nth0),
    do_test(test_nth1),
    do_test(test_splice_suspension),
    do_test(test_calc)
    -> inference_count(Infer),
       write('total_inferences='), writeln(Infer).

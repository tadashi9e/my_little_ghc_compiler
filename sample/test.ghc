% -*- coding:utf-8-unix; mode:prolog -*-
test_call3(Outs, Outs2) :- call(test_call3_aux(a), X, A),
                           call(test_call3_aux(b), A, B),
                           call(test_call3_aux(c), B, C),
                           call(test_call3_aux, C, []),
                           Outs = [writeln(X) | Outs2].
test_call3_aux(C, U, V) :-
    U = [C|V].
test_call3_aux(U, V) :-
    U = [done|V].
test_otherwise(Outs, Outs2) :-
    test_otherwise_aux(X, Outs, Outs2), X = 1.
test_otherwise_aux(X, Outs, Outs2) :-
    X = 0 | Outs = [writeln('test failed') | Outs2].
otherwise.
test_otherwise_aux(_, Outs, Outs2) :-
    Outs = [writeln('test success') | Outs2].

test_write_var(Outs, Outs2) :- Outs = [writeln(_SingletonVar) | Outs2].
test_write_atom(Outs, Outs2) :- Outs = [writeln(atom) | Outs2].
test_write_list(Outs, Outs2) :- Outs = [writeln([1,2,3,4,5|_]) | Outs2].
test_write_structure(Outs, Outs2) :-
    Outs = [writeln(some(structure, and, arguments)) | Outs2].

test_get_structure(Outs, Outs2) :- X = 1 + 2 -> Outs = [writeln(X) | Outs2].
test_set_structure(Outs, Outs2) :- 1 + 2 = X -> Outs = [writeln(X) | Outs2].
test_get_list(Outs, Outs2) :- X = [1, 2, 3] -> Outs = [writeln(X) | Outs2].
test_set_list(Outs, Outs2) :- [1, 2, 3] = X -> Outs = [writeln(X) | Outs2].

test_check_constant(Outs, Outs2) :- test_check_constant_aux(1, Outs, Outs2).
test_check_constant_aux(0, Outs, Outs2) :-
    Outs = [writeln('test failed(0)') | Outs2].
test_check_constant_aux(1, Outs, Outs2) :-
    Outs = [writeln('test success(1)') | Outs2].
otherwise.
test_check_constant_aux(_, Outs, Outs2) :-
    Outs = [writeln('test failed(otherwise)') | Outs2].

test_check_list(Outs, Outs2) :- test_check_list_aux([a,b], Outs, Outs2).
test_check_list_aux([x,y], Outs, Outs2) :-
    Outs = [writeln('test failed([x,y])') | Outs2].
test_check_list_aux([a,b], Outs, Outs2) :-
    Outs = [writeln('test success([a,b])') | Outs2].
otherwise.
test_check_list_aux(_, Outs, Outs2) :-
    Outs = [writeln('test failed(otherwise)') | Outs2].

test_check_nil(Outs, Outs2) :- test_check_nil_aux([], Outs, Outs2).
test_check_nil_aux([a,b], Outs, Outs2) :-
    Outs = [writeln('test failed([a,b])') | Outs2].
test_check_nil_aux([], Outs, Outs2) :-
    Outs = [writeln('test success([])') | Outs2].
otherwise.
test_check_nil_aux(_, Outs, Outs2) :-
    Outs = [writeln('test failed(otherwise)') | Outs2].

test_check_structure(Outs, Outs2) :-
    test_check_structure_aux(fun(a,b), Outs, Outs2).
test_check_structure_aux(fun(x,y), Outs, Outs2) :-
    Outs = [writeln('test failed(fun(x,y))') | Outs2].
test_check_structure_aux(fun(a,b), Outs, Outs2) :-
    Outs = [writeln('test success(fun(a,b))') | Outs2].
otherwise.
test_check_structure_aux(_, Outs, Outs2) :-
    Outs = [writeln('test failed(otherwise)') | Outs2].

test_wait_var(Outs, Outs2) :-
    wait_var(X, Outs, Outs2), write_var(X).
wait_var(X, Outs, Outs2) :- wait(X) | Outs = [writeln(X) | Outs2].
write_var(X) :- X = 'fire'.

test_atom_concat(Outs, Outs3) :-
    test_atom_concat_1(Outs, Outs1),
    test_atom_concat_2(Outs1, Outs2),
    test_atom_concat_3(Outs2, Outs3).

test_atom_concat_1(Outs, Outs2) :-
    atom_concat(abc, def, ABCDEF)
    ->
    Outs = [write('abc + def = '), write('['), write(ABCDEF), writeln(']')
            | Outs2].
test_atom_concat_2(Outs, Outs2) :-
    atom_concat(abc, DEF, abcdef)
    ->
    Outs = [write('abc + ['), write(DEF), writeln('] = abcdef')
           | Outs2].
test_atom_concat_3(Outs, Outs2) :-
    atom_concat(ABC, def, abcdef)
    ->
    Outs = [write('['), write(ABC), writeln('] + def = abcdef')
           | Outs2].

test_atom_chars(Outs, Outs2) :-
    test_atom_chars1(Outs, Outs1),
    test_atom_chars2(Outs1, Outs2).
test_atom_chars1(Outs, Outs2) :-
    A = 'abcdefgあいうえお漢字☺🍺',
    atom_chars(A, Cs)
    ->
    Outs = [write(A), write(' -> '), writeln(Cs) | Outs2].
test_atom_chars2(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    atom_chars(A, Cs)
    ->
    Outs = [write(A), write(' <- '), writeln(Cs) | Outs2].

test_atom_codes(Outs, Outs2) :-
    test_atom_codes1(Outs, Outs1),
    test_atom_codes2(Outs1, Outs2).
test_atom_codes1(Outs, Outs2) :-
    A = 'abcdefgあいうえお漢字☺🍺',
    atom_codes(A, Cs)
    ->
    Outs = [write(A), write(' -> '), writeln(Cs) | Outs2].
test_atom_codes2(Outs, Outs2) :-
    Cs = [97,98,99,100,101,102,103,
          227,129,130,227,129,132,227,129,134,227,129,136,227,129,138,
          230,188,162,229,173,151,
          226,152,186,
          240,159,141,186],
    atom_codes(A, Cs)
    ->
    Outs = [write(A), write(' <- '), writeln(Cs) | Outs2].

test_append(Outs, Outs3) :-
    test_append1(Outs, Outs1),
    test_append2(Outs1, Outs2),
    test_append3(Outs2, Outs3).
test_append1(Outs, Outs2) :-
    Xs = [a, b, c, d, e, f, g],
    Ys = [あ,い,う,え,お,漢,字,☺,🍺],
    append(Xs, Ys, Zs)
    ->
    Outs = [write(Xs), write(+), write(Ys), write('=['), write(Zs), writeln(']')
           | Outs2].
test_append2(Outs, Outs2) :-
    Xs = [a, b, c, d, e, f, g],
    Zs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    append(Xs, Ys, Zs)
    ->
    Outs = [write(Xs), write(+), write('['), write(Ys), write(']='), writeln(Zs)
           | Outs2].
test_append3(Outs, Outs2) :-
    Ys = [あ,い,う,え,お,漢,字,☺,🍺],
    Zs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    append(Xs, Ys, Zs)
    ->
    Outs = [write('['), write(Xs), write(']+'), write(Ys), write(=), writeln(Zs)
            | Outs2].

test_reverse(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    reverse(Cs, Rs) -> Outs = [writeln(Rs) | Outs2].
test_nth0(Outs, Outs2) :-
    test_nth0_(Outs, Outs1),
    test_nth0_rev_(Outs1, Outs2).
test_nth0_(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    nth0(0, Cs, E0),
    nth0(1, Cs, E1),
    nth0(2, Cs, E2),
    nth0(3, Cs, E3),
    nth0(4, Cs, E4),
    nth0(5, Cs, E5)
    ->
    Outs = [write(' 0: ['), write(E0),
            write('] 1: ['), write(E1),
            write('] 2: ['), write(E2),
            write('] 3: ['), write(E3),
            write('] 4: ['), write(E4),
            write('] 5: ['), write(E5), writeln(']')
            | Outs2].
test_nth0_rev_(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    nth0(N0, Cs, a),
    nth0(N1, Cs, b),
    nth0(N2, Cs, c),
    nth0(N3, Cs, d),
    nth0(N4, Cs, e),
    nth0(N5, Cs, f)
    ->
    Outs = [write(' ['), write(N0), write(']: a'),
            write(' ['), write(N1), write(']: b'),
            write(' ['), write(N2), write(']: c'),
            write(' ['), write(N3), write(']: d'),
            write(' ['), write(N4), write(']: e'),
            write(' ['), write(N5), writeln(']: f')
            | Outs2].
test_nth1(Outs, Outs2) :-
    test_nth1_(Outs, Outs1),
    test_nth1_rev_(Outs1, Outs2).
test_nth1_(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    nth1(1, Cs, E1),
    nth1(2, Cs, E2),
    nth1(3, Cs, E3),
    nth1(4, Cs, E4),
    nth1(5, Cs, E5)
    ->
    Outs = [write(' 1: ['), write(E1),
            write('] 2: ['), write(E2),
            write('] 3: ['), write(E3),
            write('] 4: ['), write(E4),
            write('] 5: ['), write(E5), writeln(']')
            | Outs2].
test_nth1_rev_(Outs, Outs2) :-
    Cs = [a, b, c, d, e, f, g, あ,い,う,え,お,漢,字,☺,🍺],
    nth1(N1, Cs, a),
    nth1(N2, Cs, b),
    nth1(N3, Cs, c),
    nth1(N4, Cs, d),
    nth1(N5, Cs, e)
    ->
    Outs = [write(' ['), write(N1), write(']: a'),
            write(' ['), write(N2), write(']: b'),
            write(' ['), write(N3), write(']: c'),
            write(' ['), write(N4), write(']: d'),
            write(' ['), write(N5), writeln(']: e')
            | Outs2].
test_splice_suspension(Outs, Outs3) :-
    test_splice_suspension1(X1, Outs, Outs1),
    test_splice_suspension1(X2, Outs1, Outs2),
    test_splice_suspension1(X3, Outs2, Outs3),
    X1 = X2,
    X2 = X3,
    dump_to_dot('dump/splice.dot'),
    X1 = 'test_splice_suspension'.
test_splice_suspension1(X, Outs, Outs2) :-
    wait(X) | Outs = [writeln(X) | Outs2].

test_calc(Outs, Outs2) :-
    X2 := X - 2,
    test_calc_report(X2, writeln(X2 := X - 1), Outs, Outs1),
    dump_to_dot('dump/calc.dot'),
    X1 := X + 2,
    test_calc_report(X1, writeln(X1 := X + 1), Outs1, Outs2),
    X = 10.
test_calc_report(X, P, Outs, Outs2) :- wait(X) | Outs = [P | Outs2].

% ----------------------------------------------------------------------

do_test(X, Outs, Outs2) :-
    Outs = [write(X),
            writeln(': ') | Outs1],
    call(X, Outs1, Outs2).

main(_) :-
    outstream(Outs),
    call((do_test(test_call3),
          do_test(test_otherwise),
          do_test(test_write_var),
          do_test(test_write_atom),
          do_test(test_write_list),
          do_test(test_write_structure),
          do_test(test_get_structure),
          do_test(test_set_structure),
          do_test(test_get_list),
          do_test(test_set_list),
          do_test(test_check_constant),
          do_test(test_check_list),
          do_test(test_check_nil),
          do_test(test_check_structure),
          do_test(test_wait_var),
          do_test(test_atom_concat),
          do_test(test_atom_chars),
          do_test(test_atom_codes),
          do_test(test_append),
          do_test(test_reverse),
          do_test(test_nth0),
          do_test(test_nth1),
          do_test(test_splice_suspension),
          do_test(test_calc)), Outs, Out2)
    -> inference_count(Infer)
    -> Out2 = [write('total_inferences='), writeln(Infer)].

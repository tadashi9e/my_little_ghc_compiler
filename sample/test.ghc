% -*- coding:utf-8-unix; mode:prolog -*-
test_otherwise :- test_otherwise_aux(X), X = 1.
test_otherwise_aux(X) :- X = 0 | writeln('test failed').
otherwise.
test_otherwise_aux(_) :- writeln('test success').

test_write_var :- writeln(Var).
test_write_atom :- writeln(atom).
test_write_list :- writeln([1,2,3,4,5|_]).
test_write_structure :- writeln(some(structure, and, arguments)).

test_get_structure :- X = 1 + 2 -> writeln(X).
test_set_structure :- 1 + 2 = X -> writeln(X).
test_get_list :- X = [1, 2, 3] -> writeln(X).
test_set_list :- [1, 2, 3] = X -> writeln(X).

test_check_constant :- test_check_constant_aux(1).
test_check_constant_aux(0) :- writeln('test failed(0)').
test_check_constant_aux(1) :- writeln('test success(1)').
otherwise.
test_check_constant_aux(_) :- writeln('test failed(otherwise)').

test_check_list :- test_check_list_aux([a,b]).
test_check_list_aux([x,y]) :- writeln('test failed([x,y])').
test_check_list_aux([a,b]) :- writeln('test success([a,b])').
otherwise.
test_check_list_aux(_) :- writeln('test failed(otherwise)').

test_check_nil :- test_check_nil_aux([]).
test_check_nil_aux([a,b]) :- writeln('test failed([a,b])').
test_check_nil_aux([]) :- writeln('test success([])').
otherwise.
test_check_nil_aux(_) :- writeln('test failed(otherwise)').

test_check_structure :- test_check_structure_aux(fun(a,b)).
test_check_structure_aux(fun(x,y)) :- writeln('test failed(fun(x,y))').
test_check_structure_aux(fun(a,b)) :- writeln('test success(fun(a,b))').
otherwise.
test_check_structure_aux(_) :- writeln('test failed(otherwise)').

test_wait_var :- wait_var(X), write_var(X).
wait_var(X) :- wait(X) | writeln(X).
write_var(X) :- X = 'fire'.

test_atom_concat :-
    test_atom_concat_1,
    test_atom_concat_2,
    test_atom_concat_3.

test_atom_concat_1 :-
    atom_concat(abc, def, ABCDEF),
    write('abc + def = '), write('['), write(ABCDEF), writeln(']').
test_atom_concat_2 :-
    atom_concat(abc, DEF, abcdef),
    write('abc + ['), write(DEF), writeln('] = abcdef').
test_atom_concat_3 :-
    atom_concat(ABC, def, abcdef),
    write('['), write(ABC), writeln('] + def = abcdef').

test_atom_chars :-
    test_atom_chars1,
    test_atom_chars2.
test_atom_chars1 :-
    A = 'abcdefg„ÅÇ„ÅÑ„ÅÜ„Åà„ÅäÊº¢Â≠ó‚ò∫üç∫',
    atom_chars(A, Cs),
    write(A), write(' -> '), writeln(Cs).
test_atom_chars2 :-
    Cs = [a, b, c, d, e, f, g, „ÅÇ,„ÅÑ,„ÅÜ,„Åà,„Åä,Êº¢,Â≠ó,‚ò∫,üç∫],
    atom_chars(A, Cs),
    write(A), write(' <- '), writeln(Cs).

test_atom_codes :-
    test_atom_codes1,
    test_atom_codes2.
test_atom_codes1 :-
    A = 'abcdefg„ÅÇ„ÅÑ„ÅÜ„Åà„ÅäÊº¢Â≠ó‚ò∫üç∫',
    atom_codes(A, Cs),
    write(A), write(' -> '), writeln(Cs).
test_atom_codes2 :-
    Cs = [97,98,99,100,101,102,103,
          227,129,130,227,129,132,227,129,134,227,129,136,227,129,138,
          230,188,162,229,173,151,
          226,152,186,
          240,159,141,186],
    atom_codes(A, Cs),
    write(A), write(' <- '), writeln(Cs).

do_test(X) :- write(X) -> writeln(': ') -> time(X).

main(_) :-
    do_test(test_otherwise),
    do_test(test_write_var),
    do_test(test_write_atom),
    do_test(test_write_list),
    do_test(test_write_structure),
    do_test(test_get_structure),
    do_test(test_set_structure),
    do_test(test_get_list),
    do_test(test_set_list),
    do_test(test_check_constant),
    do_test(test_check_list),
    do_test(test_check_nil),
    do_test(test_check_structure),
    do_test(test_wait_var),
    do_test(test_atom_concat),
    do_test(test_atom_chars),
    do_test(test_atom_codes)
    -> inference_count(Infer),
       write('total_inferences='), writeln(Infer).

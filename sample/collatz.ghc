% -*- mode:prolog -*-
collatz(1, Ns) :-
    Ns = [1].
collatz(N, Ns) :-
    N mod 2 =:= 0 | N2 := N / 2, Ns = [N | Ns2], collatz(N2, Ns2).
otherwise.
collatz(N, Ns) :-
    N2 := N * 3 + 1, Ns = [N | Ns2], collatz(N2, Ns2).

printstream([]) --> [nl].
printstream([N | Ns]) -->
    wait(N) |
    [ write(N) ],
    printstream_rest(Ns).
printstream_rest([]) --> [nl].
printstream_rest([N | Ns]) -->
    wait(N) |
    [write(','), write(N)],
    printstream_rest(Ns).

collatz_for_each_args([]) --> [].
collatz_for_each_args([A | As]) -->
    { atom_number(A, N), collatz(N, Ns) },
    printstream(Ns),
    collatz_for_each_args(As).
main([_ | Args]) :-
    outstream(Stream),
    collatz_for_each_args(Args, Stream, []).
otherwise.
main([Prog|_]) :-
    outstream([write('usage: '), write(Prog), writeln(' <N> [<N2> <N3> ...]')]).

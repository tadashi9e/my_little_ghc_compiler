label(fibonacci/2).
  goal(fibonacci/2).
  requires(8).
  try_guard_else_suspend.
  % head(fibonacci(Max,Ns)).
  % guard(true).
  activate.
  % body(fib(Max,0,1,Ns)).
  tail(4,4).
    out_value(reg(in,1),reg(out,1)).
    out_constant(0,reg(out,2)).
    out_constant(1,reg(out,3)).
    out_value(reg(in,2),reg(out,4)).
    execute(fib/4).
label(fib/4).
  goal(fib/4).
  requires(11).
  try_guard_else(label(fib/4-2)).
  % head(fib(Max,N1,N2,Ns0)).
  % guard(N2=<Max).
  seq(2,6).
    out_value(reg(in,3),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    call((=<)/2).
  activate.
  % body(Ns0=[N2|Ns1]).
    get_list(reg(in,4)).
      unify_value(reg(in,3)).
      unify_variable(reg(x,6)).
  % body(N3:=N1+N2).
  par(3,7).
    out_value(reg(in,2),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_variable(reg(y,5),reg(out,3)).
    call('__add__'/3).
  % body(fib(Max,N2,N3,Ns1)).
  tail(4,7).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_value(reg(y,5),reg(out,3)).
    out_value(reg(x,6),reg(out,4)).
    execute(fib/4).
label(fib/4-2).
  try_guard_else_suspend.
  % head(fib(Max,N1,N2,Ns0)).
  % guard(N2>Max).
  seq(2,7).
    out_value(reg(in,3),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    call((>)/2).
  activate.
  % body(Ns0=[]).
    get_nil(reg(in,4)).
  proceed.
label(printstream/1).
  goal(printstream/1).
  requires(5).
  try_guard_else_suspend.
  % head(printstream(Ns)).
  % guard(true).
  activate.
  % body(outstream(Stream)).
  par(1,3).
    out_variable(reg(y,2),reg(out,1)).
    spawn(outstream/1).
  % body(printstream(Ns,Stream)).
  tail(2,3).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(y,2),reg(out,2)).
    execute(printstream/2).
label(printstream/2).
  goal(printstream/2).
  requires(7).
  try_guard_else(label(printstream/2-2)).
  % head(printstream([],Stream)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Stream=[]).
    get_nil(reg(in,2)).
  proceed.
label(printstream/2-2).
  try_guard_else_suspend.
  % head(printstream([N|Ns],Stream)).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(wait(N)).
  wait(reg(x,4)).
  activate.
  % body(Stream=[write(N)|Stream2]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_variable(reg(x,4)).
  % body(printstream_rest(Ns,Stream2)).
  tail(2,5).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    execute(printstream_rest/2).
label(printstream_rest/2).
  goal(printstream_rest/2).
  requires(7).
  try_guard_else(label(printstream_rest/2-2)).
  % head(printstream_rest([],Stream)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Stream=[nl]).
    get_list(reg(in,2)).
      unify_constant(nl).
      unify_nil.
  proceed.
label(printstream_rest/2-2).
  try_guard_else_suspend.
  % head(printstream_rest([N|Ns],Stream)).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(wait(N)).
  wait(reg(x,4)).
  activate.
  % body(Stream=[write(,),write(N)|Stream2]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_constant(',').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_variable(reg(x,4)).
  % body(printstream_rest(Ns,Stream2)).
  tail(2,5).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    execute(printstream_rest/2).
label(main/1).
  goal(main/1).
  requires(6).
  try_guard_else(label(main/1-2)).
  % head(main([_1590,Arg])).
    check_list(reg(in,1)).
      read_void.
      read_list.
      read_variable(reg(x,2)).
      read_nil.
  % guard(true).
  activate.
  % body(atom_number(Arg,N)).
  par(2,3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(y,2),reg(out,2)).
    spawn(atom_number/2).
  % body(printstream(Ns)).
  par(1,4).
    out_variable(reg(y,3),reg(out,1)).
    spawn(printstream/1).
  % body(fibonacci(N,Ns)).
  tail(2,4).
    out_value(reg(y,2),reg(out,1)).
    out_value(reg(y,3),reg(out,2)).
    execute(fibonacci/2).
label(main/1-2).
  otherwise.
  % head(main([Prog])).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_nil.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),writeln( <Max>)])).
  tail(1,5).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,4)).
      write_list.
      write_structure(writeln/1).
      write_constant(' <Max>').
      write_nil.
    execute(outstream/1).

label(primes/2).
  goal(primes/2).
  requires(7).
  try_guard_else_suspend.
  % head(primes(Max,Ps)).
  % guard(true).
  activate.
  % body(gen(2,Max,Ns)).
  par(3,4).
    out_constant(2,reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    spawn(gen/3).
  % body(sift(Ns,Ps)).
  tail(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(sift/2).
label(gen/3).
  goal(gen/3).
  requires(9).
  try_guard_else(label(gen/3-2)).
  % head(gen(N0,Max,Ns0)).
  % guard(N0=<Max).
  seq(2,5).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    call((=<)/2).
  activate.
  % body(__inc__(N0,N1)).
  par(2,5).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,4),reg(out,2)).
    spawn('__inc__'/2).
  % body(Ns0=[N0|Ns1]).
    get_list(reg(in,3)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,5)).
  % body(gen(N1,Max,Ns1)).
  tail(3,6).
    out_value(reg(y,4),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_value(reg(x,5),reg(out,3)).
    execute(gen/3).
label(gen/3-2).
  try_guard_else_suspend.
  % head(gen(N0,Max,Ns0)).
  % guard(N0>Max).
  seq(2,6).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    call((>)/2).
  activate.
  % body(Ns0=[]).
    get_nil(reg(in,3)).
  proceed.
label(sift/2).
  goal(sift/2).
  requires(9).
  try_guard_else(label(sift/2-2)).
  % head(sift([P|Xs1],Zs0)).
    check_list(reg(in,1)).
      read_variable(reg(x,3)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(Zs0=[P|Zs1]).
    get_list(reg(in,2)).
      unify_value(reg(x,3)).
      unify_variable(reg(x,5)).
  % body(filter(P,Xs1,Ys)).
  par(3,6).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    spawn(filter/3).
  % body(sift(Ys,Zs1)).
  tail(2,6).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    execute(sift/2).
label(sift/2-2).
  try_guard_else_suspend.
  % head(sift([],Zs0)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Zs0=[]).
    get_nil(reg(in,2)).
  proceed.
label(filter/3).
  goal(filter/3).
  requires(12).
  try_guard_else(label(filter/3-2)).
  % head(filter(P,[X|Xs1],Ys0)).
    check_list(reg(in,2)).
      read_variable(reg(x,8)).
      read_variable(reg(x,7)).
  % guard((__mod__(X,P,_17590),_17590=\=0)).
  seq(3,9).
    out_value(reg(x,8),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    call('__mod__'/3).
  seq(2,9).
    out_variable(reg(y,5),reg(out,1)).
    out_value(reg(y,4),reg(out,2)).
    call((:=)/2).
  seq(2,9).
    out_variable(reg(y,6),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((:=)/2).
  seq(2,9).
    out_value(reg(y,5),reg(out,1)).
    out_value(reg(y,6),reg(out,2)).
    call((=\=)/2).
  activate.
  % body(Ys0=[X|Ys1]).
    get_list(reg(in,3)).
      unify_value(reg(x,8)).
      unify_variable(reg(x,8)).
  % body(filter(P,Xs1,Ys1)).
  tail(3,9).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_value(reg(x,8),reg(out,3)).
    execute(filter/3).
label(filter/3-2).
  try_guard_else(label(filter/3-3)).
  % head(filter(P,[X|Xs1],Ys0)).
    check_list(reg(in,2)).
      read_variable(reg(x,8)).
      read_variable(reg(x,7)).
  % guard(__mod__(X,P,0)).
  seq(3,9).
    out_value(reg(x,8),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_constant(0,reg(out,3)).
    call('__mod__'/3).
  activate.
  % body(filter(P,Xs1,Ys0)).
  tail(3,9).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    execute(filter/3).
label(filter/3-3).
  try_guard_else_suspend.
  % head(filter(_1464,[],Ys0)).
    check_nil(reg(in,2)).
  % guard(true).
  activate.
  % body(Ys0=[]).
    get_nil(reg(in,3)).
  proceed.
label(printstream/1).
  goal(printstream/1).
  requires(5).
  try_guard_else_suspend.
  % head(printstream(Ps)).
  % guard(true).
  activate.
  % body(outstream(Stream)).
  par(1,3).
    out_variable(reg(y,2),reg(out,1)).
    spawn(outstream/1).
  % body(printstream(Ps,Stream)).
  tail(2,3).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(y,2),reg(out,2)).
    execute(printstream/2).
label(printstream/2).
  goal(printstream/2).
  requires(7).
  try_guard_else(label(printstream/2-2)).
  % head(printstream([],Stream)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Stream=[]).
    get_nil(reg(in,2)).
  proceed.
label(printstream/2-2).
  try_guard_else_suspend.
  % head(printstream([P|Ps],Stream)).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(wait(P)).
  wait(reg(x,4)).
  activate.
  % body(Stream=[write(P)|Stream2]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_variable(reg(x,4)).
  % body(printstream_rest(Ps,Stream2)).
  tail(2,5).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    execute(printstream_rest/2).
label(printstream_rest/2).
  goal(printstream_rest/2).
  requires(7).
  try_guard_else(label(printstream_rest/2-2)).
  % head(printstream_rest([],Stream)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Stream=[nl]).
    get_list(reg(in,2)).
      unify_constant(nl).
      unify_nil.
  proceed.
label(printstream_rest/2-2).
  try_guard_else_suspend.
  % head(printstream_rest([P|Ps],Stream)).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(wait(P)).
  wait(reg(x,4)).
  activate.
  % body(Stream=[write(,),write(P)|Stream2]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_constant(',').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_variable(reg(x,4)).
  % body(printstream_rest(Ps,Stream2)).
  tail(2,5).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    execute(printstream_rest/2).
label(main/1).
  goal(main/1).
  requires(5).
  try_guard_else(label(main/1-2)).
  % head(main([_3138,A])).
    check_list(reg(in,1)).
      read_void.
      read_list.
      read_variable(reg(x,2)).
      read_nil.
  % guard(true).
  activate.
  % body(atom_number(A,N)).
  par(2,3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(y,2),reg(out,2)).
    spawn(atom_number/2).
  % body(time(primes(N,Primes))).
  par(1,4).
    out_structure(primes/2,reg(out,1)).
      write_value(reg(y,2)).
      write_variable(reg(x,3)).
    spawn(time/1).
  % body(printstream(Primes)).
  tail(1,4).
    out_value(reg(x,3),reg(out,1)).
    execute(printstream/1).
label(main/1-2).
  otherwise.
  % head(main([Prog|_3782])).
    check_list(reg(in,1)).
      read_variable(reg(x,3)).
      read_void.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),write( <max>),nl])).
  tail(1,4).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,3)).
      write_list.
      write_structure(write/1).
      write_constant(' <max>').
      write_list.
      write_constant(nl).
      write_nil.
    execute(outstream/1).

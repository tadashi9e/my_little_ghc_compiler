label(collatz/2).
  goal(collatz/2).
  requires(9).
  try_guard_else(label(collatz/2-2)).
  % head(collatz(1,Ns)).
    check_constant(1,reg(in,1)).
  % guard(true).
  activate.
  % body(Ns=[1]).
    get_list(reg(in,2)).
      unify_constant(1).
      unify_nil.
  proceed.
label(collatz/2-2).
  try_guard_else(label(collatz/2-3)).
  % head(collatz(N,Ns)).
  % guard(N mod 2=:=0).
  seq(2,4).
    out_variable(reg(y,3),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((:=)/2).
  seq(2,4).
    out_structure((mod)/2,reg(out,1)).
      write_value(reg(in,1)).
      write_constant(2).
    out_value(reg(y,3),reg(out,2)).
    call((=:=)/2).
  activate.
  % body(N2:=N/2).
  par(3,5).
    out_value(reg(in,1),reg(out,1)).
    out_constant(2,reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    call('__div__'/3).
  % body(Ns=[N|Ns2]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,5)).
  % body(collatz(N2,Ns2)).
  tail(2,6).
    out_value(reg(y,4),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    execute(collatz/2).
label(collatz/2-3).
  otherwise.
  % head(collatz(N,Ns)).
  % guard(true).
  activate.
  % body(N2:=N*3+1).
  par(2,6).
    out_structure((*)/2,reg(out,1)).
      write_value(reg(in,1)).
      write_constant(3).
    out_variable(reg(y,5),reg(out,2)).
    call('__inc__'/2).
  % body(Ns=[N|Ns2]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,6)).
  % body(collatz(N2,Ns2)).
  tail(2,7).
    out_value(reg(y,5),reg(out,1)).
    out_value(reg(x,6),reg(out,2)).
    execute(collatz/2).
label(printstream/2).
  goal(printstream/2).
  requires(9).
  try_guard_else(label(printstream/2-2)).
  % head(printstream([],Stream-Stream2)).
    check_nil(reg(in,1)).
    check_structure((-)/2,reg(in,2)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(true).
  activate.
  % body(Stream=[nl|Stream2]).
    get_list(reg(x,4)).
      unify_constant(nl).
      unify_value(reg(x,3)).
  proceed.
label(printstream/2-2).
  try_guard_else_suspend.
  % head(printstream([N|Ns],Stream-Stream2)).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,3)).
    check_structure((-)/2,reg(in,2)).
      read_variable(reg(x,6)).
      read_variable(reg(x,4)).
  % guard(wait(N)).
  wait(reg(x,5)).
  activate.
  % body(Stream=[write(N)|Stream1]).
    get_list(reg(x,6)).
      unify_structure(write/1).
      unify_value(reg(x,5)).
      unify_variable(reg(x,5)).
  % body(printstream_rest(Ns,Stream1-Stream2)).
  tail(2,7).
    out_value(reg(x,3),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(x,5)).
      write_value(reg(x,4)).
    execute(printstream_rest/2).
label(printstream_rest/2).
  goal(printstream_rest/2).
  requires(9).
  try_guard_else(label(printstream_rest/2-2)).
  % head(printstream_rest([],Stream-Stream2)).
    check_nil(reg(in,1)).
    check_structure((-)/2,reg(in,2)).
      read_variable(reg(x,4)).
      read_variable(reg(x,3)).
  % guard(true).
  activate.
  % body(Stream=[nl|Stream2]).
    get_list(reg(x,4)).
      unify_constant(nl).
      unify_value(reg(x,3)).
  proceed.
label(printstream_rest/2-2).
  try_guard_else_suspend.
  % head(printstream_rest([N|Ns],Stream-Stream2)).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,3)).
    check_structure((-)/2,reg(in,2)).
      read_variable(reg(x,6)).
      read_variable(reg(x,4)).
  % guard(wait(N)).
  wait(reg(x,5)).
  activate.
  % body(Stream=[write(,),write(N)|Stream1]).
    get_list(reg(x,6)).
      unify_structure(write/1).
      unify_constant(',').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,5)).
      unify_variable(reg(x,5)).
  % body(printstream_rest(Ns,Stream1-Stream2)).
  tail(2,7).
    out_value(reg(x,3),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(x,5)).
      write_value(reg(x,4)).
    execute(printstream_rest/2).
label(collatz_for_each_args/2).
  goal(collatz_for_each_args/2).
  requires(10).
  try_guard_else_suspend.
  % head(collatz_for_each_args([A|As],Stream-Stream2)).
    check_list(reg(in,1)).
      read_variable(reg(x,3)).
      read_variable(reg(x,5)).
    check_structure((-)/2,reg(in,2)).
      read_variable(reg(x,7)).
      read_variable(reg(x,6)).
  % guard(true).
  activate.
  % body(atom_number(A,N)).
  par(2,8).
    out_value(reg(x,3),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(atom_number/2).
  % body(printstream(Ns,Stream-Stream1)).
  par(2,8).
    out_variable(reg(y,4),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(x,7)).
      write_variable(reg(x,7)).
    spawn(printstream/2).
  % body(collatz(N,Ns)).
  par(2,8).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(y,4),reg(out,2)).
    spawn(collatz/2).
  % body(collatz_for_each_args(As,Stream1-Stream2)).
  tail(2,8).
    out_value(reg(x,5),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(x,7)).
      write_value(reg(x,6)).
    execute(collatz_for_each_args/2).
label(main/1).
  goal(main/1).
  requires(6).
  try_guard_else(label(main/1-2)).
  % head(main([_1762|Args])).
    check_list(reg(in,1)).
      read_void.
      read_variable(reg(x,3)).
  % guard(true).
  activate.
  % body(outstream(Stream)).
  par(1,4).
    out_variable(reg(y,2),reg(out,1)).
    spawn(outstream/1).
  % body(collatz_for_each_args(Args,Stream-[])).
  tail(2,4).
    out_value(reg(x,3),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(y,2)).
      write_nil.
    execute(collatz_for_each_args/2).
label(main/1-2).
  otherwise.
  % head(main(_2260)).
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),writeln( <N> [<N2> <N3> ...])])).
  tail(1,4).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_variable(reg(x,3)).
      write_list.
      write_structure(writeln/1).
      write_constant(' <N> [<N2> <N3> ...]').
      write_nil.
    execute(outstream/1).

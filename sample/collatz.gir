label(collatz/2).
  goal(collatz/2).
  requires(10).
  try_guard_else(label(collatz/2-2)).
  % head(collatz(1,Ns)).
    check_constant(1,reg(in,1)).
  % guard(true).
  activate.
  % body(Ns=[1]).
    get_list(reg(in,2)).
      unify_constant(1).
      unify_nil.
  proceed.
label(collatz/2-2).
  try_guard_else(label(collatz/2-3)).
  % head(collatz(N,Ns)).
  % guard((__mod__(N,2,_),_==0)).
  seq(3,4).
    out_value(reg(in,1),reg(out,1)).
    out_constant(2,reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call('__mod__'/3).
  seq(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((==)/2).
  activate.
  % body(__div__(N,2,N2)).
  par(3,5).
    out_value(reg(in,1),reg(out,1)).
    out_constant(2,reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn('__div__'/3).
  % body(Ns=[N|Ns2]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,5)).
  % body(collatz(N2,Ns2)).
  tail(2,6).
    out_value(reg(y,4),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    execute(collatz/2).
label(collatz/2-3).
  otherwise.
  % head(collatz(N,Ns)).
  % guard(true).
  activate.
  % body(__mul__(N,3,_)).
  par(3,6).
    out_value(reg(in,1),reg(out,1)).
    out_constant(3,reg(out,2)).
    out_variable(reg(y,5),reg(out,3)).
    spawn('__mul__'/3).
  % body(__inc__(_,N2)).
  par(2,7).
    out_value(reg(y,5),reg(out,1)).
    out_variable(reg(y,6),reg(out,2)).
    spawn('__inc__'/2).
  % body(Ns=[N|Ns2]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,7)).
  % body(collatz(N2,Ns2)).
  tail(2,8).
    out_value(reg(y,6),reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    execute(collatz/2).
label(printstream/3).
  goal(printstream/3).
  requires(9).
  try_guard_else(label(printstream/3-2)).
  % head(printstream([],_IO1,_IO3)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(_IO1=[nl|_IO2]).
    get_list(reg(in,2)).
      unify_constant(nl).
      unify_variable(reg(x,4)).
  % body(_IO2=_IO3).
    get_value(reg(in,3),reg(x,4)).
  proceed.
label(printstream/3-2).
  try_guard_else_suspend.
  % head(printstream([N|Ns],_IO4,_IO7)).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,4)).
  % guard(wait(N)).
  wait(reg(x,5)).
  activate.
  % body(_IO4=[write(N)|_IO5]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_value(reg(x,5)).
      unify_variable(reg(x,5)).
  % body(printstream_rest(Ns,_IO5,_IO6)).
  par(3,6).
    out_value(reg(x,4),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn(printstream_rest/3).
  % body(_IO6=_IO7).
    get_value(reg(in,3),reg(y,4)).
  proceed.
label(printstream_rest/3).
  goal(printstream_rest/3).
  requires(9).
  try_guard_else(label(printstream_rest/3-2)).
  % head(printstream_rest([],_IO8,_IO10)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(_IO8=[nl|_IO9]).
    get_list(reg(in,2)).
      unify_constant(nl).
      unify_variable(reg(x,4)).
  % body(_IO9=_IO10).
    get_value(reg(in,3),reg(x,4)).
  proceed.
label(printstream_rest/3-2).
  try_guard_else_suspend.
  % head(printstream_rest([N|Ns],_IO11,_IO14)).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,4)).
  % guard(wait(N)).
  wait(reg(x,5)).
  activate.
  % body(_IO11=[write(,),write(N)|_IO12]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_constant(',').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,5)).
      unify_variable(reg(x,5)).
  % body(printstream_rest(Ns,_IO12,_IO13)).
  par(3,6).
    out_value(reg(x,4),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn(printstream_rest/3).
  % body(_IO13=_IO14).
    get_value(reg(in,3),reg(y,4)).
  proceed.
label(collatz_for_each_args/3).
  goal(collatz_for_each_args/3).
  requires(11).
  try_guard_else(label(collatz_for_each_args/3-2)).
  % head(collatz_for_each_args([],_IO15,_IO16)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(_IO15=_IO16).
    get_value(reg(in,3),reg(in,2)).
  proceed.
label(collatz_for_each_args/3-2).
  try_guard_else_suspend.
  % head(collatz_for_each_args([A|As],_IO17,_IO20)).
    check_list(reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,7)).
  % guard(true).
  activate.
  % body(atom_number(A,N)).
  par(2,8).
    out_value(reg(x,4),reg(out,1)).
    out_variable(reg(y,4),reg(out,2)).
    spawn(atom_number/2).
  % body(collatz(N,Ns)).
  par(2,8).
    out_value(reg(y,4),reg(out,1)).
    out_variable(reg(y,5),reg(out,2)).
    spawn(collatz/2).
  % body(printstream(Ns,_IO17,_IO18)).
  par(3,8).
    out_value(reg(y,5),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    spawn(printstream/3).
  % body(collatz_for_each_args(As,_IO18,_IO19)).
  par(3,8).
    out_value(reg(x,7),reg(out,1)).
    out_value(reg(y,6),reg(out,2)).
    out_variable(reg(y,7),reg(out,3)).
    spawn(collatz_for_each_args/3).
  % body(_IO19=_IO20).
    get_value(reg(in,3),reg(y,7)).
  proceed.
label(main/1).
  goal(main/1).
  requires(7).
  try_guard_else(label(main/1-2)).
  % head(main([_|Args])).
    check_list(reg(in,1)).
      read_void.
      read_variable(reg(x,3)).
  % guard(true).
  activate.
  % body(outstream(Stream)).
  par(1,4).
    out_variable(reg(y,2),reg(out,1)).
    spawn(outstream/1).
  % body(collatz_for_each_args(Args,Stream,[])).
  tail(3,4).
    out_value(reg(x,3),reg(out,1)).
    out_value(reg(y,2),reg(out,2)).
    out_nil(reg(out,3)).
    execute(collatz_for_each_args/3).
label(main/1-2).
  otherwise.
  % head(main([Prog|_])).
    check_list(reg(in,1)).
      read_variable(reg(x,3)).
      read_void.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),writeln( <N> [<N2> <N3> ...])])).
  tail(1,4).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,3)).
      write_list.
      write_structure(writeln/1).
      write_constant(' <N> [<N2> <N3> ...]').
      write_nil.
    execute(outstream/1).

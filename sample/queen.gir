label(main/1).
  goal(main/1).
  requires(7).
  try_guard_else(label(main/1-2)).
  % head(main([_,Arg])).
    check_list(reg(in,1)).
      read_void.
      read_list.
      read_variable(reg(x,2)).
      read_nil.
  % guard(true).
  activate.
  % body(atom_number(Arg,N)).
  par(2,3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(y,2),reg(out,2)).
    spawn(atom_number/2).
  % body(wait_time(X)).
  par(1,4).
    out_variable(reg(y,3),reg(out,1)).
    spawn(wait_time/1).
  % body(go(N,X)).
  par(2,4).
    out_value(reg(y,2),reg(out,1)).
    out_value(reg(y,3),reg(out,2)).
    spawn(go/2).
  % body(outstream(Os)).
  par(1,5).
    out_variable(reg(y,4),reg(out,1)).
    spawn(outstream/1).
  % body(report_results(Os-[],X)).
  tail(2,5).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(y,4)).
      write_nil.
    out_value(reg(y,3),reg(out,2)).
    execute(report_results/2).
label(main/1-2).
  otherwise.
  % head(main([Prog|_])).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_void.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),writeln( <N>)])).
  tail(1,6).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,5)).
      write_list.
      write_structure(writeln/1).
      write_constant(' <N>').
      write_nil.
    execute(outstream/1).
label(report_results/2).
  goal(report_results/2).
  requires(8).
  try_guard_else_suspend.
  % head(report_results(Os-Os2,X)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,3)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(report_results(Os-Os2,X,1)).
  tail(3,5).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,3)).
      write_value(reg(x,4)).
    out_value(reg(in,2),reg(out,2)).
    out_constant(1,reg(out,3)).
    execute(report_results/3).
label(report_results/3).
  goal(report_results/3).
  requires(12).
  try_guard_else_suspend.
  % head(report_results(Os-Os2,[X|Xs],N)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,4)).
      read_variable(reg(x,5)).
    check_list(reg(in,2)).
      read_variable(reg(x,8)).
      read_variable(reg(x,6)).
  % guard(true).
  activate.
  % body(report1(Os-Os1,X,N)).
  par(3,9).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,4)).
      write_variable(reg(x,7)).
    out_value(reg(x,8),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    spawn(report1/3).
  % body(__inc__(N,N1)).
  par(2,9).
    out_value(reg(in,3),reg(out,1)).
    out_variable(reg(y,4),reg(out,2)).
    spawn('__inc__'/2).
  % body(report_results(Os1-Os2,Xs,N1)).
  tail(3,9).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,7)).
      write_value(reg(x,5)).
    out_value(reg(x,6),reg(out,2)).
    out_value(reg(y,4),reg(out,3)).
    execute(report_results/3).
label(report1/3).
  goal(report1/3).
  requires(5).
  try_guard_else_suspend.
  % head(report1(Os-Os2,X,N)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(Os=[write(N),write(:),writeln(X)|Os2]).
    get_list(reg(x,5)).
      unify_structure(write/1).
      unify_value(reg(in,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(:).
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(in,2)).
      unify_value(reg(x,4)).
  proceed.
label(go/2).
  goal(go/2).
  requires(11).
  try_guard_else_suspend.
  % head(go(N,X)).
  % guard(true).
  activate.
  % body(gen(N,L)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(gen/2).
  % body(queen(L,[],[],X,[])).
  tail(5,6).
    out_value(reg(y,3),reg(out,1)).
    out_nil(reg(out,2)).
    out_nil(reg(out,3)).
    out_value(reg(in,2),reg(out,4)).
    out_nil(reg(out,5)).
    execute(queen/5).
label(queen/5).
  goal(queen/5).
  requires(17).
  try_guard_else(label(queen/5-2)).
  % head(queen([],[],L,I,O)).
    check_nil(reg(in,1)).
    check_nil(reg(in,2)).
  % guard(true).
  activate.
  % body(I=[L|O]).
    get_list(reg(in,4)).
      unify_value(reg(in,3)).
      unify_value(reg(in,5)).
  proceed.
label(queen/5-2).
  try_guard_else(label(queen/5-3)).
  % head(queen([],[_|_],_,I,O)).
    check_nil(reg(in,1)).
    check_list(reg(in,2)).
      read_void.
      read_void.
  % guard(true).
  activate.
  % body(I=O).
    get_value(reg(in,5),reg(in,4)).
  proceed.
label(queen/5-3).
  try_guard_else_suspend.
  % head(queen([P|U],C,L,I0,I2)).
    check_list(reg(in,1)).
      read_variable(reg(x,7)).
      read_variable(reg(x,8)).
  % guard(true).
  activate.
  % body(check(L,P,1,U,C,L,I0,I1)).
  par(8,9).
    out_value(reg(in,3),reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_constant(1,reg(out,3)).
    out_value(reg(x,8),reg(out,4)).
    out_value(reg(in,2),reg(out,5)).
    out_value(reg(in,3),reg(out,6)).
    out_value(reg(in,4),reg(out,7)).
    out_variable(reg(y,6),reg(out,8)).
    spawn(check/8).
  % body(queen(U,[P|C],L,I1,I2)).
  tail(5,9).
    out_value(reg(x,8),reg(out,1)).
    out_list(reg(out,2)).
      write_value(reg(x,7)).
      write_value(reg(in,2)).
    out_value(reg(in,3),reg(out,3)).
    out_value(reg(y,6),reg(out,4)).
    out_value(reg(in,5),reg(out,5)).
    execute(queen/5).
label(check/8).
  goal(check/8).
  requires(22).
  try_guard_else(label(check/8-2)).
  % head(check([],T,_D,U,C,B,I,O)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(concat(U,C,N)).
  par(3,10).
    out_value(reg(in,4),reg(out,1)).
    out_value(reg(in,5),reg(out,2)).
    out_variable(reg(y,9),reg(out,3)).
    spawn(concat/3).
  % body(queen(N,[],[T|B],I,O)).
  tail(5,10).
    out_value(reg(y,9),reg(out,1)).
    out_nil(reg(out,2)).
    out_list(reg(out,3)).
      write_value(reg(in,2)).
      write_value(reg(in,6)).
    out_value(reg(in,7),reg(out,4)).
    out_value(reg(in,8),reg(out,5)).
    execute(queen/5).
label(check/8-2).
  try_guard_else(label(check/8-3)).
  % head(check([P|R],T,D,U,C,B,I,O)).
    check_list(reg(in,1)).
      read_variable(reg(x,11)).
      read_variable(reg(x,13)).
  % guard((__add__(P,D,_),T=\=_,__sub__(P,D,_),T=\=_)).
  seq(3,14).
    out_value(reg(x,11),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_variable(reg(y,10),reg(out,3)).
    call('__add__'/3).
  seq(2,14).
    out_value(reg(in,2),reg(out,1)).
    out_value(reg(y,10),reg(out,2)).
    call((=\=)/2).
  seq(3,14).
    out_value(reg(x,11),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_variable(reg(y,11),reg(out,3)).
    call('__sub__'/3).
  seq(2,14).
    out_value(reg(in,2),reg(out,1)).
    out_value(reg(y,11),reg(out,2)).
    call((=\=)/2).
  activate.
  % body(__inc__(D,D1)).
  par(2,14).
    out_value(reg(in,3),reg(out,1)).
    out_variable(reg(y,12),reg(out,2)).
    spawn('__inc__'/2).
  % body(check(R,T,D1,U,C,B,I,O)).
  tail(8,14).
    out_value(reg(x,13),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_value(reg(y,12),reg(out,3)).
    out_value(reg(in,4),reg(out,4)).
    out_value(reg(in,5),reg(out,5)).
    out_value(reg(in,6),reg(out,6)).
    out_value(reg(in,7),reg(out,7)).
    out_value(reg(in,8),reg(out,8)).
    execute(check/8).
label(check/8-3).
  try_guard_else(label(check/8-4)).
  % head(check([P|_R],T,D,_U,_C,_B,I,O)).
    check_list(reg(in,1)).
      read_variable(reg(x,13)).
      read_variable(reg(x,14)).
  % guard((__add__(P,D,_),_:=T,_==_)).
  seq(3,15).
    out_value(reg(x,13),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_variable(reg(y,13),reg(out,3)).
    call('__add__'/3).
  seq(2,15).
    out_variable(reg(y,14),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    call((:=)/2).
  seq(2,15).
    out_value(reg(y,14),reg(out,1)).
    out_value(reg(y,13),reg(out,2)).
    call((==)/2).
  activate.
  % body(I=O).
    get_value(reg(in,8),reg(in,7)).
  proceed.
label(check/8-4).
  try_guard_else_suspend.
  % head(check([P|_R],T,D,_U,_C,_B,I,O)).
    check_list(reg(in,1)).
      read_variable(reg(x,15)).
      read_variable(reg(x,16)).
  % guard((__sub__(P,D,_),_:=T,_==_)).
  seq(3,17).
    out_value(reg(x,15),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_variable(reg(y,15),reg(out,3)).
    call('__sub__'/3).
  seq(2,17).
    out_variable(reg(y,16),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    call((:=)/2).
  seq(2,17).
    out_value(reg(y,16),reg(out,1)).
    out_value(reg(y,15),reg(out,2)).
    call((==)/2).
  activate.
  % body(I=O).
    get_value(reg(in,8),reg(in,7)).
  proceed.
label(concat/3).
  goal(concat/3).
  requires(9).
  try_guard_else(label(concat/3-2)).
  % head(concat([],Y,Z)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Z=Y).
    get_value(reg(in,2),reg(in,3)).
  proceed.
label(concat/3-2).
  try_guard_else_suspend.
  % head(concat([W|X],Y,WZ)).
    check_list(reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(WZ=[W|Z]).
    get_list(reg(in,3)).
      unify_value(reg(x,5)).
      unify_variable(reg(x,5)).
  % body(concat(X,Y,Z)).
  tail(3,6).
    out_value(reg(x,4),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_value(reg(x,5),reg(out,3)).
    execute(concat/3).
label(gen/2).
  goal(gen/2).
  requires(7).
  try_guard_else(label(gen/2-2)).
  % head(gen(N,X)).
  % guard(N>0).
  seq(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((>)/2).
  activate.
  % body(X=[N|Xs]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_variable(reg(x,4)).
  % body(__dec__(N,M)).
  par(2,5).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn('__dec__'/2).
  % body(gen(M,Xs)).
  tail(2,5).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    execute(gen/2).
label(gen/2-2).
  try_guard_else_suspend.
  % head(gen(N,X)).
  % guard((_:=N,_==0)).
  seq(2,5).
    out_variable(reg(y,4),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    call((:=)/2).
  seq(2,5).
    out_value(reg(y,4),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((==)/2).
  activate.
  % body(X=[]).
    get_nil(reg(in,2)).
  proceed.

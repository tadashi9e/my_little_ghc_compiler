label(main/1).
  goal(main/1).
  requires(6).
  try_guard_else(label(main/1-2)).
  % head(main([_4182,Arg])).
    check_list(reg(in,1)).
      read_void.
      read_list.
      read_variable(reg(x,2)).
      read_nil.
  % guard(true).
  activate.
  % body(atom_number(Arg,N)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(x,2),reg(out,2)).
    spawn(atom_number/2).
  % body(outstream(Os)).
  par(4).
    out_variable(reg(x,3),reg(out,1)).
    spawn(outstream/1).
  % body(report_results(Os-[],X)).
  par(4).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,3)).
      write_nil.
    out_variable(reg(x,3),reg(out,2)).
    spawn(report_results/2).
  % body(wait_time(X)).
  par(4).
    out_value(reg(x,3),reg(out,1)).
    spawn(wait_time/1).
  % body(go(N,X)).
  tail(4).
    out_value(reg(x,2),reg(out,1)).
    out_value(reg(x,3),reg(out,2)).
    execute(go/2).
label(main/1-2).
  otherwise.
  % head(main([Prog,_6028])).
    check_list(reg(in,1)).
      read_variable(reg(x,2)).
      read_list.
      read_void.
      read_nil.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),writeln( <N>)])).
  tail(4).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,2)).
      write_list.
      write_structure(writeln/1).
      write_constant(' <N>').
      write_nil.
    execute(outstream/1).
label(report_results/2).
  goal(report_results/2).
  requires(8).
  try_guard_else_suspend.
  % head(report_results(Os-Os2,X)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,3)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(report_results(Os-Os2,X,1)).
  tail(5).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,3)).
      write_value(reg(x,4)).
    out_value(reg(in,2),reg(out,2)).
    out_constant(1,reg(out,3)).
    execute(report_results/3).
label(report_results/3).
  goal(report_results/3).
  requires(11).
  try_guard_else_suspend.
  % head(report_results(Os-Os2,[X|Xs],N)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,6)).
      read_variable(reg(x,4)).
    check_list(reg(in,2)).
      read_variable(reg(x,7)).
      read_variable(reg(x,5)).
  % guard(true).
  activate.
  % body(report1(Os-Os1,X,N)).
  par(8).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,6)).
      write_variable(reg(x,6)).
    out_value(reg(x,7),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    spawn(report1/3).
  % body(N1:=N+1).
  par(8).
    out_variable(reg(x,7),reg(out,1)).
    out_structure((+)/2,reg(out,2)).
      write_value(reg(in,3)).
      write_constant(1).
    spawn((:=)/2).
  % body(report_results(Os1-Os2,Xs,N1)).
  tail(8).
    out_structure((-)/2,reg(out,1)).
      write_value(reg(x,6)).
      write_value(reg(x,4)).
    out_value(reg(x,5),reg(out,2)).
    out_value(reg(x,7),reg(out,3)).
    execute(report_results/3).
label(report1/3).
  goal(report1/3).
  requires(9).
  try_guard_else_suspend.
  % head(report1(Os-Os2,X,N)).
    check_structure((-)/2,reg(in,1)).
      read_variable(reg(x,5)).
      read_variable(reg(x,4)).
  % guard(true).
  activate.
  % body(Os=[write(N),write(:),writeln(X)|Os2]).
    get_list(reg(x,5)).
      unify_structure(write/1).
      unify_value(reg(in,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(:).
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(in,2)).
      unify_value(reg(x,4)).
  proceed.
label(go/2).
  goal(go/2).
  requires(9).
  try_guard_else_suspend.
  % head(go(N,X)).
  % guard(true).
  activate.
  % body(move(N,left,center,right,X,[])).
  tail(4).
    out_value(reg(in,1),reg(out,1)).
    out_constant(left,reg(out,2)).
    out_constant(center,reg(out,3)).
    out_constant(right,reg(out,4)).
    out_value(reg(in,2),reg(out,5)).
    out_nil(reg(out,6)).
    execute(move/6).
label(move/6).
  goal(move/6).
  requires(15).
  try_guard_else(label(move/6-2)).
  % head(move(0,_1256,_1258,_1260,O1,O2)).
    check_constant(0,reg(in,1)).
  % guard(true).
  activate.
  % body(O1=O2).
    get_value(reg(in,6),reg(in,5)).
  proceed.
label(move/6-2).
  try_guard_else_suspend.
  % head(move(N,A,B,C,O1,O4)).
  % guard(N>0).
  seq(8).
    out_value(reg(in,1),reg(out,1)).
    out_constant(0,reg(out,2)).
    call((>)/2).
  activate.
  % body(M:=N-1).
  par(8).
    out_variable(reg(x,7),reg(out,1)).
    out_structure((-)/2,reg(out,2)).
      write_value(reg(in,1)).
      write_constant(1).
    spawn((:=)/2).
  % body(move(M,A,C,B,O1,[m(A,B)|O3])).
  par(9).
    out_value(reg(x,7),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_value(reg(in,4),reg(out,3)).
    out_value(reg(in,3),reg(out,4)).
    out_value(reg(in,5),reg(out,5)).
    out_list(reg(out,6)).
      write_structure(m/2).
      write_value(reg(in,2)).
      write_value(reg(in,3)).
      write_variable(reg(x,8)).
    spawn(move/6).
  % body(move(M,C,B,A,O3,O4)).
  tail(9).
    out_value(reg(x,7),reg(out,1)).
    out_value(reg(in,4),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    out_value(reg(in,2),reg(out,4)).
    out_value(reg(x,8),reg(out,5)).
    out_value(reg(in,6),reg(out,6)).
    execute(move/6).

label(test_call3/2).
  goal(test_call3/2).
  requires(10).
  try_guard_else_suspend.
  % head(test_call3(Outs,Outs2)).
  % guard(true).
  activate.
  % body(call(test_call3_aux(a),X,A)).
  par(3,5).
    out_structure(test_call3_aux/1,reg(out,1)).
      write_constant(a).
    out_variable(reg(y,3),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn(call/3).
  % body(call(test_call3_aux(b),A,B)).
  par(3,6).
    out_structure(test_call3_aux/1,reg(out,1)).
      write_constant(b).
    out_value(reg(y,4),reg(out,2)).
    out_variable(reg(y,5),reg(out,3)).
    spawn(call/3).
  % body(call(test_call3_aux(c),B,C)).
  par(3,7).
    out_structure(test_call3_aux/1,reg(out,1)).
      write_constant(c).
    out_value(reg(y,5),reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    spawn(call/3).
  % body(call(test_call3_aux,C,[])).
  par(3,7).
    out_constant(test_call3_aux,reg(out,1)).
    out_value(reg(y,6),reg(out,2)).
    out_nil(reg(out,3)).
    spawn(call/3).
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(y,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_call3_aux/3).
  goal(test_call3_aux/3).
  requires(4).
  try_guard_else_suspend.
  % head(test_call3_aux(C,U,V)).
  % guard(true).
  activate.
  % body(U=[C|V]).
    get_list(reg(in,2)).
      unify_value(reg(in,1)).
      unify_value(reg(in,3)).
  proceed.
label(test_call3_aux/2).
  goal(test_call3_aux/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_call3_aux(U,V)).
  % guard(true).
  activate.
  % body(U=[done|V]).
    get_list(reg(in,1)).
      unify_constant(done).
      unify_value(reg(in,2)).
  proceed.
label(test_otherwise/2).
  goal(test_otherwise/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_otherwise(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_otherwise_aux(X,Outs,Outs2)).
  par(3,4).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    spawn(test_otherwise_aux/3).
  % body(X=1).
    get_constant(1,reg(y,3)).
  proceed.
label(test_otherwise_aux/3).
  goal(test_otherwise_aux/3).
  requires(4).
  try_guard_else(label(test_otherwise_aux/3-2)).
  % head(test_otherwise_aux(X,Outs,Outs2)).
  % guard(X=0).
    check_constant(0,reg(in,1)).
  activate.
  % body(Outs=[writeln(test failed)|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed').
      unify_value(reg(in,3)).
  proceed.
label(test_otherwise_aux/3-2).
  otherwise.
  % head(test_otherwise_aux(_1084,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test success)|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test success').
      unify_value(reg(in,3)).
  proceed.
label(test_write_var/2).
  goal(test_write_var/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_write_var(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(Var)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_variable(reg(x,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_write_atom/2).
  goal(test_write_atom/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_write_atom(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(atom)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_constant(atom).
      unify_value(reg(in,2)).
  proceed.
label(test_write_list/2).
  goal(test_write_list/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_write_list(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln([1,2,3,4,5|_1758])|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_list.
      unify_constant(1).
      unify_list.
      unify_constant(2).
      unify_list.
      unify_constant(3).
      unify_list.
      unify_constant(4).
      unify_list.
      unify_constant(5).
      unify_void.
      unify_value(reg(in,2)).
  proceed.
label(test_write_structure/2).
  goal(test_write_structure/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_write_structure(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(some(structure,and,arguments))|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_structure(some/3).
      unify_constant(structure).
      unify_constant(and).
      unify_constant(arguments).
      unify_value(reg(in,2)).
  proceed.
label(test_get_structure/2).
  goal(test_get_structure/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_get_structure(Outs,Outs2)).
  % guard(true).
  activate.
  % body(X=1+2).
    set_variable(reg(x,3)).
    get_structure((+)/2,reg(x,3)).
      unify_constant(1).
      unify_constant(2).
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(x,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_set_structure/2).
  goal(test_set_structure/2).
  requires(4).
  try_guard_else_suspend.
  % head(test_set_structure(Outs,Outs2)).
  % guard(true).
  activate.
  % body(1+2=X).
    set_structure((+)/2,reg(x,4)).
      write_constant(1).
      write_constant(2).
    get_variable(reg(x,3),reg(x,4)).
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(x,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_get_list/2).
  goal(test_get_list/2).
  requires(3).
  try_guard_else_suspend.
  % head(test_get_list(Outs,Outs2)).
  % guard(true).
  activate.
  % body(X=[1,2,3]).
    set_variable(reg(x,3)).
    get_list(reg(x,3)).
      unify_constant(1).
      unify_list.
      unify_constant(2).
      unify_list.
      unify_constant(3).
      unify_nil.
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(x,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_set_list/2).
  goal(test_set_list/2).
  requires(4).
  try_guard_else_suspend.
  % head(test_set_list(Outs,Outs2)).
  % guard(true).
  activate.
  % body([1,2,3]=X).
    set_list(reg(x,3)).
      write_constant(1).
      write_list.
      write_constant(2).
      write_list.
      write_constant(3).
      write_nil.
    get_variable(reg(x,4),reg(x,3)).
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(x,4)).
      unify_value(reg(in,2)).
  proceed.
label(test_check_constant/2).
  goal(test_check_constant/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_check_constant(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_check_constant_aux(1,Outs,Outs2)).
  tail(3,4).
    out_constant(1,reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    execute(test_check_constant_aux/3).
label(test_check_constant_aux/3).
  goal(test_check_constant_aux/3).
  requires(4).
  try_guard_else(label(test_check_constant_aux/3-2)).
  % head(test_check_constant_aux(0,Outs,Outs2)).
    check_constant(0,reg(in,1)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(0))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(0)').
      unify_value(reg(in,3)).
  proceed.
label(test_check_constant_aux/3-2).
  try_guard_else(label(test_check_constant_aux/3-3)).
  % head(test_check_constant_aux(1,Outs,Outs2)).
    check_constant(1,reg(in,1)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test success(1))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test success(1)').
      unify_value(reg(in,3)).
  proceed.
label(test_check_constant_aux/3-3).
  otherwise.
  % head(test_check_constant_aux(_4882,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(otherwise))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(otherwise)').
      unify_value(reg(in,3)).
  proceed.
label(test_check_list/2).
  goal(test_check_list/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_check_list(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_check_list_aux([a,b],Outs,Outs2)).
  tail(3,4).
    out_list(reg(out,1)).
      write_constant(a).
      write_list.
      write_constant(b).
      write_nil.
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    execute(test_check_list_aux/3).
label(test_check_list_aux/3).
  goal(test_check_list_aux/3).
  requires(4).
  try_guard_else(label(test_check_list_aux/3-2)).
  % head(test_check_list_aux([x,y],Outs,Outs2)).
    check_list(reg(in,1)).
      read_constant(x).
      read_list.
      read_constant(y).
      read_nil.
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed([x,y]))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed([x,y])').
      unify_value(reg(in,3)).
  proceed.
label(test_check_list_aux/3-2).
  try_guard_else(label(test_check_list_aux/3-3)).
  % head(test_check_list_aux([a,b],Outs,Outs2)).
    check_list(reg(in,1)).
      read_constant(a).
      read_list.
      read_constant(b).
      read_nil.
  % guard(true).
  activate.
  % body(Outs=[writeln(test success([a,b]))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test success([a,b])').
      unify_value(reg(in,3)).
  proceed.
label(test_check_list_aux/3-3).
  otherwise.
  % head(test_check_list_aux(_6826,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(otherwise))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(otherwise)').
      unify_value(reg(in,3)).
  proceed.
label(test_check_nil/2).
  goal(test_check_nil/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_check_nil(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_check_nil_aux([],Outs,Outs2)).
  tail(3,4).
    out_nil(reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    execute(test_check_nil_aux/3).
label(test_check_nil_aux/3).
  goal(test_check_nil_aux/3).
  requires(4).
  try_guard_else(label(test_check_nil_aux/3-2)).
  % head(test_check_nil_aux([a,b],Outs,Outs2)).
    check_list(reg(in,1)).
      read_constant(a).
      read_list.
      read_constant(b).
      read_nil.
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed([a,b]))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed([a,b])').
      unify_value(reg(in,3)).
  proceed.
label(test_check_nil_aux/3-2).
  try_guard_else(label(test_check_nil_aux/3-3)).
  % head(test_check_nil_aux([],Outs,Outs2)).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test success([]))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test success([])').
      unify_value(reg(in,3)).
  proceed.
label(test_check_nil_aux/3-3).
  otherwise.
  % head(test_check_nil_aux(_8982,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(otherwise))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(otherwise)').
      unify_value(reg(in,3)).
  proceed.
label(test_check_structure/2).
  goal(test_check_structure/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_check_structure(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_check_structure_aux(fun(a,b),Outs,Outs2)).
  tail(3,4).
    out_structure(fun/2,reg(out,1)).
      write_constant(a).
      write_constant(b).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    execute(test_check_structure_aux/3).
label(test_check_structure_aux/3).
  goal(test_check_structure_aux/3).
  requires(4).
  try_guard_else(label(test_check_structure_aux/3-2)).
  % head(test_check_structure_aux(fun(x,y),Outs,Outs2)).
    check_structure(fun/2,reg(in,1)).
      read_constant(x).
      read_constant(y).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(fun(x,y)))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(fun(x,y))').
      unify_value(reg(in,3)).
  proceed.
label(test_check_structure_aux/3-2).
  try_guard_else(label(test_check_structure_aux/3-3)).
  % head(test_check_structure_aux(fun(a,b),Outs,Outs2)).
    check_structure(fun/2,reg(in,1)).
      read_constant(a).
      read_constant(b).
  % guard(true).
  activate.
  % body(Outs=[writeln(test success(fun(a,b)))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test success(fun(a,b))').
      unify_value(reg(in,3)).
  proceed.
label(test_check_structure_aux/3-3).
  otherwise.
  % head(test_check_structure_aux(_11382,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[writeln(test failed(otherwise))|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_constant('test failed(otherwise)').
      unify_value(reg(in,3)).
  proceed.
label(test_wait_var/2).
  goal(test_wait_var/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_wait_var(Outs,Outs2)).
  % guard(true).
  activate.
  % body(wait_var(X,Outs,Outs2)).
  par(3,4).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    spawn(wait_var/3).
  % body(write_var(X)).
  tail(1,4).
    out_value(reg(y,3),reg(out,1)).
    execute(write_var/1).
label(wait_var/3).
  goal(wait_var/3).
  requires(4).
  try_guard_else_suspend.
  % head(wait_var(X,Outs,Outs2)).
  % guard(wait(X)).
  wait(reg(in,1)).
  activate.
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_value(reg(in,1)).
      unify_value(reg(in,3)).
  proceed.
label(write_var/1).
  goal(write_var/1).
  requires(2).
  try_guard_else_suspend.
  % head(write_var(X)).
  % guard(true).
  activate.
  % body(X=fire).
    get_constant(fire,reg(in,1)).
  proceed.
label(test_atom_concat/2).
  goal(test_atom_concat/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_concat(Outs,Outs3)).
  % guard(true).
  activate.
  % body(test_atom_concat_1(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_atom_concat_1/2).
  % body(test_atom_concat_2(Outs1,Outs2)).
  par(2,5).
    out_value(reg(y,3),reg(out,1)).
    out_variable(reg(y,4),reg(out,2)).
    spawn(test_atom_concat_2/2).
  % body(test_atom_concat_3(Outs2,Outs3)).
  tail(2,5).
    out_value(reg(y,4),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_atom_concat_3/2).
label(test_atom_concat_1/2).
  goal(test_atom_concat_1/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_concat_1(Outs,Outs2)).
  % guard(true).
  activate.
  % body(atom_concat(abc,def,ABCDEF)).
  seq(3,4).
    out_constant(abc,reg(out,1)).
    out_constant(def,reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call(atom_concat/3).
  % body(Outs=[write(abc + def = ),write([),write(ABCDEF),writeln(])|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant('abc + def = ').
      unify_list.
      unify_structure(write/1).
      unify_constant('[').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']').
      unify_value(reg(in,2)).
  proceed.
label(test_atom_concat_2/2).
  goal(test_atom_concat_2/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_concat_2(Outs,Outs2)).
  % guard(true).
  activate.
  % body(atom_concat(abc,DEF,abcdef)).
  seq(3,4).
    out_constant(abc,reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    out_constant(abcdef,reg(out,3)).
    call(atom_concat/3).
  % body(Outs=[write(abc + [),write(DEF),writeln(] = abcdef)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant('abc + [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant('] = abcdef').
      unify_value(reg(in,2)).
  proceed.
label(test_atom_concat_3/2).
  goal(test_atom_concat_3/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_concat_3(Outs,Outs2)).
  % guard(true).
  activate.
  % body(atom_concat(ABC,def,abcdef)).
  seq(3,4).
    out_variable(reg(y,3),reg(out,1)).
    out_constant(def,reg(out,2)).
    out_constant(abcdef,reg(out,3)).
    call(atom_concat/3).
  % body(Outs=[write([),write(ABC),writeln(] + def = abcdef)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant('[').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant('] + def = abcdef').
      unify_value(reg(in,2)).
  proceed.
label(test_atom_chars/2).
  goal(test_atom_chars/2).
  requires(6).
  try_guard_else_suspend.
  % head(test_atom_chars(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_atom_chars1(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_atom_chars1/2).
  % body(test_atom_chars2(Outs1,Outs2)).
  tail(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_atom_chars2/2).
label(test_atom_chars1/2).
  goal(test_atom_chars1/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_chars1(Outs,Outs2)).
  % guard(true).
  activate.
  % body(A=abcdefgあいうえお漢字☺🍺).
    set_variable(reg(x,4)).
    get_constant('abcdefgあいうえお漢字☺🍺',reg(x,4)).
  % body(atom_chars(A,Cs)).
  seq(2,5).
    out_value(reg(x,4),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    call(atom_chars/2).
  % body(Outs=[write(A),write( -> ),writeln(Cs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(' -> ').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(y,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_atom_chars2/2).
  goal(test_atom_chars2/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_chars2(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,4)).
    get_list(reg(x,4)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(atom_chars(A,Cs)).
  seq(2,5).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    call(atom_chars/2).
  % body(Outs=[write(A),write( <- ),writeln(Cs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(' <- ').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(x,4)).
      unify_value(reg(in,2)).
  proceed.
label(test_atom_codes/2).
  goal(test_atom_codes/2).
  requires(6).
  try_guard_else_suspend.
  % head(test_atom_codes(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_atom_codes1(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_atom_codes1/2).
  % body(test_atom_codes2(Outs1,Outs2)).
  tail(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_atom_codes2/2).
label(test_atom_codes1/2).
  goal(test_atom_codes1/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_codes1(Outs,Outs2)).
  % guard(true).
  activate.
  % body(A=abcdefgあいうえお漢字☺🍺).
    set_variable(reg(x,4)).
    get_constant('abcdefgあいうえお漢字☺🍺',reg(x,4)).
  % body(atom_codes(A,Cs)).
  seq(2,5).
    out_value(reg(x,4),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    call(atom_codes/2).
  % body(Outs=[write(A),write( -> ),writeln(Cs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(' -> ').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(y,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_atom_codes2/2).
  goal(test_atom_codes2/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_atom_codes2(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[97,98,99,100,101,102,103,227,129,130,227,129,132,227,129,134,227,129,136,227,129,138,230,188,162,229,173,151,226,152,186,240,159,141,186]).
    set_variable(reg(x,4)).
    get_list(reg(x,4)).
      unify_constant(97).
      unify_list.
      unify_constant(98).
      unify_list.
      unify_constant(99).
      unify_list.
      unify_constant(100).
      unify_list.
      unify_constant(101).
      unify_list.
      unify_constant(102).
      unify_list.
      unify_constant(103).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(130).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(132).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(134).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(136).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(138).
      unify_list.
      unify_constant(230).
      unify_list.
      unify_constant(188).
      unify_list.
      unify_constant(162).
      unify_list.
      unify_constant(229).
      unify_list.
      unify_constant(173).
      unify_list.
      unify_constant(151).
      unify_list.
      unify_constant(226).
      unify_list.
      unify_constant(152).
      unify_list.
      unify_constant(186).
      unify_list.
      unify_constant(240).
      unify_list.
      unify_constant(159).
      unify_list.
      unify_constant(141).
      unify_list.
      unify_constant(186).
      unify_nil.
  % body(atom_codes(A,Cs)).
  seq(2,5).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    call(atom_codes/2).
  % body(Outs=[write(A),write( <- ),writeln(Cs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(' <- ').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(x,4)).
      unify_value(reg(in,2)).
  proceed.
label(test_append/2).
  goal(test_append/2).
  requires(7).
  try_guard_else_suspend.
  % head(test_append(Outs,Outs3)).
  % guard(true).
  activate.
  % body(test_append1(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_append1/2).
  % body(test_append2(Outs1,Outs2)).
  par(2,5).
    out_value(reg(y,3),reg(out,1)).
    out_variable(reg(y,4),reg(out,2)).
    spawn(test_append2/2).
  % body(test_append3(Outs2,Outs3)).
  tail(2,5).
    out_value(reg(y,4),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_append3/2).
label(test_append1/2).
  goal(test_append1/2).
  requires(9).
  try_guard_else_suspend.
  % head(test_append1(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Xs=[a,b,c,d,e,f,g]).
    set_variable(reg(x,4)).
    get_list(reg(x,4)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_nil.
  % body(Ys=[あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,5)).
    get_list(reg(x,5)).
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  seq(3,6).
    out_value(reg(x,4),reg(out,1)).
    out_value(reg(x,5),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call(append/3).
  % body(Outs=[write(Xs),write(+),write(Ys),write(=[),write(Zs),writeln(])|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(+).
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,5)).
      unify_list.
      unify_structure(write/1).
      unify_constant('=[').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']').
      unify_value(reg(in,2)).
  proceed.
label(test_append2/2).
  goal(test_append2/2).
  requires(9).
  try_guard_else_suspend.
  % head(test_append2(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Xs=[a,b,c,d,e,f,g]).
    set_variable(reg(x,4)).
    get_list(reg(x,4)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_nil.
  % body(Zs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,5)).
    get_list(reg(x,5)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  seq(3,6).
    out_value(reg(x,4),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    out_value(reg(x,5),reg(out,3)).
    call(append/3).
  % body(Outs=[write(Xs),write(+),write([),write(Ys),write(]=),writeln(Zs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(+).
      unify_list.
      unify_structure(write/1).
      unify_constant('[').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']=').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(x,5)).
      unify_value(reg(in,2)).
  proceed.
label(test_append3/2).
  goal(test_append3/2).
  requires(9).
  try_guard_else_suspend.
  % head(test_append3(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Ys=[あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,4)).
    get_list(reg(x,4)).
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(Zs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,5)).
    get_list(reg(x,5)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  seq(3,6).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    out_value(reg(x,5),reg(out,3)).
    call(append/3).
  % body(Outs=[write([),write(Xs),write(]+),write(Ys),write(=),writeln(Zs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant('[').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']+').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(x,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(=).
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(x,5)).
      unify_value(reg(in,2)).
  proceed.
label(test_reverse/2).
  goal(test_reverse/2).
  requires(6).
  try_guard_else_suspend.
  % head(test_reverse(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,3)).
    get_list(reg(x,3)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(reverse(Cs,Rs)).
  seq(2,4).
    out_value(reg(x,3),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    call(reverse/2).
  % body(Outs=[writeln(Rs)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(writeln/1).
      unify_value(reg(y,3)).
      unify_value(reg(in,2)).
  proceed.
label(test_nth0/2).
  goal(test_nth0/2).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth0(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_nth0_(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_nth0_/2).
  % body(test_nth0_rev_(Outs1,Outs2)).
  tail(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_nth0_rev_/2).
label(test_nth0_/2).
  goal(test_nth0_/2).
  requires(12).
  try_guard_else_suspend.
  % head(test_nth0_(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,8)).
    get_list(reg(x,8)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth0(0,Cs,E0)).
  seq(3,9).
    out_constant(0,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call(nth0/3).
  % body(nth0(1,Cs,E1)).
  seq(3,9).
    out_constant(1,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    call(nth0/3).
  % body(nth0(2,Cs,E2)).
  seq(3,9).
    out_constant(2,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,5),reg(out,3)).
    call(nth0/3).
  % body(nth0(3,Cs,E3)).
  seq(3,9).
    out_constant(3,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    call(nth0/3).
  % body(nth0(4,Cs,E4)).
  seq(3,9).
    out_constant(4,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,7),reg(out,3)).
    call(nth0/3).
  % body(nth0(5,Cs,E5)).
  seq(3,9).
    out_constant(5,reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_variable(reg(y,8),reg(out,3)).
    call(nth0/3).
  % body(Outs=[write( 0: [),write(E0),write(] 1: [),write(E1),write(] 2: [),write(E2),write(] 3: [),write(E3),write(] 4: [),write(E4),write(] 5: [),write(E5),writeln(])|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant(' 0: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 1: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 2: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,5)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 3: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,6)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 4: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,7)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 5: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,8)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']').
      unify_value(reg(in,2)).
  proceed.
label(test_nth0_rev_/2).
  goal(test_nth0_rev_/2).
  requires(13).
  try_guard_else_suspend.
  % head(test_nth0_rev_(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,9)).
    get_list(reg(x,9)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth0(N0,Cs,a)).
  seq(3,10).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(a,reg(out,3)).
    call(nth0/3).
  % body(nth0(N1,Cs,b)).
  seq(3,10).
    out_variable(reg(y,4),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(b,reg(out,3)).
    call(nth0/3).
  % body(nth0(N2,Cs,c)).
  seq(3,10).
    out_variable(reg(y,5),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(c,reg(out,3)).
    call(nth0/3).
  % body(nth0(N3,Cs,d)).
  seq(3,10).
    out_variable(reg(y,6),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(d,reg(out,3)).
    call(nth0/3).
  % body(nth0(N4,Cs,e)).
  seq(3,10).
    out_variable(reg(y,7),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(e,reg(out,3)).
    call(nth0/3).
  % body(nth0(N5,Cs,f)).
  seq(3,10).
    out_variable(reg(y,8),reg(out,1)).
    out_value(reg(x,9),reg(out,2)).
    out_constant(f,reg(out,3)).
    call(nth0/3).
  % body(Outs=[write( [),write(N0),write(]: a),write( [),write(N1),write(]: b),write( [),write(N2),write(]: c),write( [),write(N3),write(]: d),write( [),write(N4),write(]: e),write( [),write(N5),writeln(]: f)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: a').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: b').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,5)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: c').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,6)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: d').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,7)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: e').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,8)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']: f').
      unify_value(reg(in,2)).
  proceed.
label(test_nth1/2).
  goal(test_nth1/2).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth1(Outs,Outs2)).
  % guard(true).
  activate.
  % body(test_nth1_(Outs,Outs1)).
  par(2,4).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(y,3),reg(out,2)).
    spawn(test_nth1_/2).
  % body(test_nth1_rev_(Outs1,Outs2)).
  tail(2,4).
    out_value(reg(y,3),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    execute(test_nth1_rev_/2).
label(test_nth1_/2).
  goal(test_nth1_/2).
  requires(11).
  try_guard_else_suspend.
  % head(test_nth1_(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,7)).
    get_list(reg(x,7)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth1(1,Cs,E1)).
  seq(3,8).
    out_constant(1,reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call(nth1/3).
  % body(nth1(2,Cs,E2)).
  seq(3,8).
    out_constant(2,reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    call(nth1/3).
  % body(nth1(3,Cs,E3)).
  seq(3,8).
    out_constant(3,reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_variable(reg(y,5),reg(out,3)).
    call(nth1/3).
  % body(nth1(4,Cs,E4)).
  seq(3,8).
    out_constant(4,reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    call(nth1/3).
  % body(nth1(5,Cs,E5)).
  seq(3,8).
    out_constant(5,reg(out,1)).
    out_value(reg(x,7),reg(out,2)).
    out_variable(reg(y,7),reg(out,3)).
    call(nth1/3).
  % body(Outs=[write( 1: [),write(E1),write(] 2: [),write(E2),write(] 3: [),write(E3),write(] 4: [),write(E4),write(] 5: [),write(E5),writeln(])|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant(' 1: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 2: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 3: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,5)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 4: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,6)).
      unify_list.
      unify_structure(write/1).
      unify_constant('] 5: [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,7)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']').
      unify_value(reg(in,2)).
  proceed.
label(test_nth1_rev_/2).
  goal(test_nth1_rev_/2).
  requires(12).
  try_guard_else_suspend.
  % head(test_nth1_rev_(Outs,Outs2)).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,8)).
    get_list(reg(x,8)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth1(N1,Cs,a)).
  seq(3,9).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_constant(a,reg(out,3)).
    call(nth1/3).
  % body(nth1(N2,Cs,b)).
  seq(3,9).
    out_variable(reg(y,4),reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_constant(b,reg(out,3)).
    call(nth1/3).
  % body(nth1(N3,Cs,c)).
  seq(3,9).
    out_variable(reg(y,5),reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_constant(c,reg(out,3)).
    call(nth1/3).
  % body(nth1(N4,Cs,d)).
  seq(3,9).
    out_variable(reg(y,6),reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_constant(d,reg(out,3)).
    call(nth1/3).
  % body(nth1(N5,Cs,e)).
  seq(3,9).
    out_variable(reg(y,7),reg(out,1)).
    out_value(reg(x,8),reg(out,2)).
    out_constant(e,reg(out,3)).
    call(nth1/3).
  % body(Outs=[write( [),write(N1),write(]: a),write( [),write(N2),write(]: b),write( [),write(N3),write(]: c),write( [),write(N4),write(]: d),write( [),write(N5),writeln(]: e)|Outs2]).
    get_list(reg(in,1)).
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,3)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: a').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,4)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: b').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,5)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: c').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,6)).
      unify_list.
      unify_structure(write/1).
      unify_constant(']: d').
      unify_list.
      unify_structure(write/1).
      unify_constant(' [').
      unify_list.
      unify_structure(write/1).
      unify_value(reg(y,7)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(']: e').
      unify_value(reg(in,2)).
  proceed.
label(test_splice_suspension/2).
  goal(test_splice_suspension/2).
  requires(11).
  try_guard_else_suspend.
  % head(test_splice_suspension(Outs,Outs3)).
  % guard(true).
  activate.
  % body(test_splice_suspension1(X1,Outs,Outs1)).
  par(3,5).
    out_variable(reg(y,3),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn(test_splice_suspension1/3).
  % body(test_splice_suspension1(X2,Outs1,Outs2)).
  par(3,7).
    out_variable(reg(y,5),reg(out,1)).
    out_value(reg(y,4),reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    spawn(test_splice_suspension1/3).
  % body(test_splice_suspension1(X3,Outs2,Outs3)).
  par(3,8).
    out_variable(reg(y,7),reg(out,1)).
    out_value(reg(y,6),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    spawn(test_splice_suspension1/3).
  % body(X1=X2).
    get_value(reg(y,5),reg(y,3)).
  % body(X2=X3).
    get_value(reg(y,7),reg(y,5)).
  % body(dump_to_dot(dump/splice.dot)).
  par(1,8).
    out_constant('dump/splice.dot',reg(out,1)).
    spawn(dump_to_dot/1).
  % body(X1=test_splice_suspension).
    get_constant(test_splice_suspension,reg(y,3)).
  proceed.
label(test_splice_suspension1/3).
  goal(test_splice_suspension1/3).
  requires(4).
  try_guard_else_suspend.
  % head(test_splice_suspension1(X,Outs,Outs2)).
  % guard(wait(X)).
  wait(reg(in,1)).
  activate.
  % body(Outs=[writeln(X)|Outs2]).
    get_list(reg(in,2)).
      unify_structure(writeln/1).
      unify_value(reg(in,1)).
      unify_value(reg(in,3)).
  proceed.
label(test_calc/2).
  goal(test_calc/2).
  requires(11).
  try_guard_else_suspend.
  % head(test_calc(Outs,Outs2)).
  % guard(true).
  activate.
  % body(__sub__(X,2,X2)).
  par(3,5).
    out_variable(reg(y,3),reg(out,1)).
    out_constant(2,reg(out,2)).
    out_variable(reg(y,4),reg(out,3)).
    spawn('__sub__'/3).
  % body(test_calc_report(X2,writeln(X2:=X-1),Outs,Outs1)).
  par(4,6).
    out_value(reg(y,4),reg(out,1)).
    out_structure(writeln/1,reg(out,2)).
      write_structure((:=)/2).
      write_value(reg(y,4)).
      write_structure((-)/2).
      write_value(reg(y,3)).
      write_constant(1).
    out_value(reg(in,1),reg(out,3)).
    out_variable(reg(y,5),reg(out,4)).
    spawn(test_calc_report/4).
  % body(dump_to_dot(dump/calc.dot)).
  par(1,6).
    out_constant('dump/calc.dot',reg(out,1)).
    spawn(dump_to_dot/1).
  % body(__add__(X,2,X1)).
  par(3,7).
    out_value(reg(y,3),reg(out,1)).
    out_constant(2,reg(out,2)).
    out_variable(reg(y,6),reg(out,3)).
    spawn('__add__'/3).
  % body(test_calc_report(X1,writeln(X1:=X+1),Outs1,Outs2)).
  par(4,7).
    out_value(reg(y,6),reg(out,1)).
    out_structure(writeln/1,reg(out,2)).
      write_structure((:=)/2).
      write_value(reg(y,6)).
      write_structure((+)/2).
      write_value(reg(y,3)).
      write_constant(1).
    out_value(reg(y,5),reg(out,3)).
    out_value(reg(in,2),reg(out,4)).
    spawn(test_calc_report/4).
  % body(X=10).
    get_constant(10,reg(y,3)).
  proceed.
label(test_calc_report/4).
  goal(test_calc_report/4).
  requires(5).
  try_guard_else_suspend.
  % head(test_calc_report(X,P,Outs,Outs2)).
  % guard(wait(X)).
  wait(reg(in,1)).
  activate.
  % body(Outs=[P|Outs2]).
    get_list(reg(in,3)).
      unify_value(reg(in,2)).
      unify_value(reg(in,4)).
  proceed.
label(do_test/3).
  goal(do_test/3).
  requires(8).
  try_guard_else_suspend.
  % head(do_test(X,Outs,Outs2)).
  % guard(true).
  activate.
  % body(Outs=[write(X),writeln(: )|Outs1]).
    get_list(reg(in,2)).
      unify_structure(write/1).
      unify_value(reg(in,1)).
      unify_list.
      unify_structure(writeln/1).
      unify_constant(': ').
      unify_variable(reg(x,4)).
  % body(call(X,Outs1,Outs2)).
  tail(3,5).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(x,4),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    execute(call/3).
label(main/1).
  goal(main/1).
  requires(7).
  try_guard_else_suspend.
  % head(main(_40116)).
  % guard(true).
  activate.
  % body(outstream(Outs)).
  seq(1,3).
    out_variable(reg(y,2),reg(out,1)).
    call(outstream/1).
  % body(call((do_test(test_call3),do_test(test_otherwise),do_test(test_write_var),do_test(test_write_atom),do_test(test_write_list),do_test(test_write_structure),do_test(test_get_structure),do_test(test_set_structure),do_test(test_get_list),do_test(test_set_list),do_test(test_check_constant),do_test(test_check_list),do_test(test_check_nil),do_test(test_check_structure),do_test(test_wait_var),do_test(test_atom_concat),do_test(test_atom_chars),do_test(test_atom_codes),do_test(test_append),do_test(test_reverse),do_test(test_nth0),do_test(test_nth1),do_test(test_splice_suspension),do_test(test_calc)),Outs,Out2)).
  seq(3,4).
    out_structure((',')/2,reg(out,1)).
      write_structure(do_test/1).
      write_constant(test_call3).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_otherwise).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_write_var).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_write_atom).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_write_list).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_write_structure).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_get_structure).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_set_structure).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_get_list).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_set_list).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_check_constant).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_check_list).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_check_nil).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_check_structure).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_wait_var).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_atom_concat).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_atom_chars).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_atom_codes).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_append).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_reverse).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_nth0).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_nth1).
      write_structure((',')/2).
      write_structure(do_test/1).
      write_constant(test_splice_suspension).
      write_structure(do_test/1).
      write_constant(test_calc).
    out_value(reg(y,2),reg(out,2)).
    out_variable(reg(y,3),reg(out,3)).
    call(call/3).
  % body(inference_count(Infer)).
  seq(1,5).
    out_variable(reg(y,4),reg(out,1)).
    call(inference_count/1).
  % body(Out2=[write(total_inferences=),writeln(Infer)]).
    get_list(reg(y,3)).
      unify_structure(write/1).
      unify_constant('total_inferences=').
      unify_list.
      unify_structure(writeln/1).
      unify_value(reg(y,4)).
      unify_nil.
  proceed.

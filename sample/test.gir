label(test_otherwise/0).
  goal(test_otherwise/0).
  requires(3).
  try_guard_else_suspend.
  % head(test_otherwise).
  % guard(true).
  activate.
  % body(test_otherwise_aux(X)).
  par(2).
    out_variable(reg(x,1),reg(out,1)).
    spawn(test_otherwise_aux/1).
  % body(X=1).
    get_constant(1,reg(x,1)).
  proceed.
label(test_otherwise_aux/1).
  goal(test_otherwise_aux/1).
  requires(3).
  try_guard_else(label(test_otherwise_aux/1-2)).
  % head(test_otherwise_aux(X)).
  % guard(X=0).
    check_constant(0,reg(in,1)).
  activate.
  % body(writeln(test failed)).
  tail(3).
    out_constant('test failed',reg(out,1)).
    execute(writeln/1).
label(test_otherwise_aux/1-2).
  otherwise.
  % head(test_otherwise_aux(_346)).
  % guard(true).
  activate.
  % body(writeln(test success)).
  tail(3).
    out_constant('test success',reg(out,1)).
    execute(writeln/1).
label(test_write_var/0).
  goal(test_write_var/0).
  requires(3).
  try_guard_else_suspend.
  % head(test_write_var).
  % guard(true).
  activate.
  % body(writeln(Var)).
  tail(2).
    out_variable(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_write_atom/0).
  goal(test_write_atom/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_write_atom).
  % guard(true).
  activate.
  % body(writeln(atom)).
  tail(2).
    out_constant(atom,reg(out,1)).
    execute(writeln/1).
label(test_write_list/0).
  goal(test_write_list/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_write_list).
  % guard(true).
  activate.
  % body(writeln([1,2,3,4,5|_528])).
  tail(2).
    out_list(reg(out,1)).
      write_constant(1).
      write_list.
      write_constant(2).
      write_list.
      write_constant(3).
      write_list.
      write_constant(4).
      write_list.
      write_constant(5).
      write_void.
    execute(writeln/1).
label(test_write_structure/0).
  goal(test_write_structure/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_write_structure).
  % guard(true).
  activate.
  % body(writeln(some(structure,and,arguments))).
  tail(2).
    out_structure(some/3,reg(out,1)).
      write_constant(structure).
      write_constant(and).
      write_constant(arguments).
    execute(writeln/1).
label(test_get_structure/0).
  goal(test_get_structure/0).
  requires(3).
  try_guard_else_suspend.
  % head(test_get_structure).
  % guard(true).
  activate.
  % body(X=1+2).
    set_variable(reg(x,1)).
    get_structure((+)/2,reg(x,1)).
      unify_constant(1).
      unify_constant(2).
  % body(writeln(X)).
  tail(2).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_set_structure/0).
  goal(test_set_structure/0).
  requires(4).
  try_guard_else_suspend.
  % head(test_set_structure).
  % guard(true).
  activate.
  % body(1+2=X).
    set_structure((+)/2,reg(x,1)).
      write_constant(1).
      write_constant(2).
    get_variable(reg(x,2),reg(x,1)).
  % body(writeln(X)).
  tail(3).
    out_value(reg(x,2),reg(out,1)).
    execute(writeln/1).
label(test_get_list/0).
  goal(test_get_list/0).
  requires(3).
  try_guard_else_suspend.
  % head(test_get_list).
  % guard(true).
  activate.
  % body(X=[1,2,3]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(1).
      unify_list.
      unify_constant(2).
      unify_list.
      unify_constant(3).
      unify_nil.
  % body(writeln(X)).
  tail(2).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_set_list/0).
  goal(test_set_list/0).
  requires(4).
  try_guard_else_suspend.
  % head(test_set_list).
  % guard(true).
  activate.
  % body([1,2,3]=X).
    set_list(reg(x,1)).
      write_constant(1).
      write_list.
      write_constant(2).
      write_list.
      write_constant(3).
      write_nil.
    get_variable(reg(x,2),reg(x,1)).
  % body(writeln(X)).
  tail(3).
    out_value(reg(x,2),reg(out,1)).
    execute(writeln/1).
label(test_check_constant/0).
  goal(test_check_constant/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_check_constant).
  % guard(true).
  activate.
  % body(test_check_constant_aux(1)).
  tail(2).
    out_constant(1,reg(out,1)).
    execute(test_check_constant_aux/1).
label(test_check_constant_aux/1).
  goal(test_check_constant_aux/1).
  requires(3).
  try_guard_else(label(test_check_constant_aux/1-2)).
  % head(test_check_constant_aux(0)).
    check_constant(0,reg(in,1)).
  % guard(true).
  activate.
  % body(writeln(test failed(0))).
  tail(3).
    out_constant('test failed(0)',reg(out,1)).
    execute(writeln/1).
label(test_check_constant_aux/1-2).
  try_guard_else(label(test_check_constant_aux/1-3)).
  % head(test_check_constant_aux(1)).
    check_constant(1,reg(in,1)).
  % guard(true).
  activate.
  % body(writeln(test success(1))).
  tail(3).
    out_constant('test success(1)',reg(out,1)).
    execute(writeln/1).
label(test_check_constant_aux/1-3).
  otherwise.
  % head(test_check_constant_aux(_1478)).
  % guard(true).
  activate.
  % body(writeln(test failed(otherwise))).
  tail(3).
    out_constant('test failed(otherwise)',reg(out,1)).
    execute(writeln/1).
label(test_check_list/0).
  goal(test_check_list/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_check_list).
  % guard(true).
  activate.
  % body(test_check_list_aux([a,b])).
  tail(2).
    out_list(reg(out,1)).
      write_constant(a).
      write_list.
      write_constant(b).
      write_nil.
    execute(test_check_list_aux/1).
label(test_check_list_aux/1).
  goal(test_check_list_aux/1).
  requires(3).
  try_guard_else(label(test_check_list_aux/1-2)).
  % head(test_check_list_aux([x,y])).
    check_list(reg(in,1)).
      read_constant(x).
      read_list.
      read_constant(y).
      read_nil.
  % guard(true).
  activate.
  % body(writeln(test failed([x,y]))).
  tail(3).
    out_constant('test failed([x,y])',reg(out,1)).
    execute(writeln/1).
label(test_check_list_aux/1-2).
  try_guard_else(label(test_check_list_aux/1-3)).
  % head(test_check_list_aux([a,b])).
    check_list(reg(in,1)).
      read_constant(a).
      read_list.
      read_constant(b).
      read_nil.
  % guard(true).
  activate.
  % body(writeln(test success([a,b]))).
  tail(3).
    out_constant('test success([a,b])',reg(out,1)).
    execute(writeln/1).
label(test_check_list_aux/1-3).
  otherwise.
  % head(test_check_list_aux(_1972)).
  % guard(true).
  activate.
  % body(writeln(test failed(otherwise))).
  tail(3).
    out_constant('test failed(otherwise)',reg(out,1)).
    execute(writeln/1).
label(test_check_nil/0).
  goal(test_check_nil/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_check_nil).
  % guard(true).
  activate.
  % body(test_check_nil_aux([])).
  tail(2).
    out_nil(reg(out,1)).
    execute(test_check_nil_aux/1).
label(test_check_nil_aux/1).
  goal(test_check_nil_aux/1).
  requires(3).
  try_guard_else(label(test_check_nil_aux/1-2)).
  % head(test_check_nil_aux([a,b])).
    check_list(reg(in,1)).
      read_constant(a).
      read_list.
      read_constant(b).
      read_nil.
  % guard(true).
  activate.
  % body(writeln(test failed([a,b]))).
  tail(3).
    out_constant('test failed([a,b])',reg(out,1)).
    execute(writeln/1).
label(test_check_nil_aux/1-2).
  try_guard_else(label(test_check_nil_aux/1-3)).
  % head(test_check_nil_aux([])).
    check_nil(reg(in,1)).
  % guard(true).
  activate.
  % body(writeln(test success([]))).
  tail(3).
    out_constant('test success([])',reg(out,1)).
    execute(writeln/1).
label(test_check_nil_aux/1-3).
  otherwise.
  % head(test_check_nil_aux(_2438)).
  % guard(true).
  activate.
  % body(writeln(test failed(otherwise))).
  tail(3).
    out_constant('test failed(otherwise)',reg(out,1)).
    execute(writeln/1).
label(test_check_structure/0).
  goal(test_check_structure/0).
  requires(2).
  try_guard_else_suspend.
  % head(test_check_structure).
  % guard(true).
  activate.
  % body(test_check_structure_aux(fun(a,b))).
  tail(2).
    out_structure(fun/2,reg(out,1)).
      write_constant(a).
      write_constant(b).
    execute(test_check_structure_aux/1).
label(test_check_structure_aux/1).
  goal(test_check_structure_aux/1).
  requires(3).
  try_guard_else(label(test_check_structure_aux/1-2)).
  % head(test_check_structure_aux(fun(x,y))).
    check_structure(fun/2,reg(in,1)).
      read_constant(x).
      read_constant(y).
  % guard(true).
  activate.
  % body(writeln(test failed(fun(x,y)))).
  tail(3).
    out_constant('test failed(fun(x,y))',reg(out,1)).
    execute(writeln/1).
label(test_check_structure_aux/1-2).
  try_guard_else(label(test_check_structure_aux/1-3)).
  % head(test_check_structure_aux(fun(a,b))).
    check_structure(fun/2,reg(in,1)).
      read_constant(a).
      read_constant(b).
  % guard(true).
  activate.
  % body(writeln(test success(fun(a,b)))).
  tail(3).
    out_constant('test success(fun(a,b))',reg(out,1)).
    execute(writeln/1).
label(test_check_structure_aux/1-3).
  otherwise.
  % head(test_check_structure_aux(_2908)).
  % guard(true).
  activate.
  % body(writeln(test failed(otherwise))).
  tail(3).
    out_constant('test failed(otherwise)',reg(out,1)).
    execute(writeln/1).
label(test_wait_var/0).
  goal(test_wait_var/0).
  requires(3).
  try_guard_else_suspend.
  % head(test_wait_var).
  % guard(true).
  activate.
  % body(wait_var(X)).
  par(2).
    out_variable(reg(x,1),reg(out,1)).
    spawn(wait_var/1).
  % body(write_var(X)).
  tail(2).
    out_value(reg(x,1),reg(out,1)).
    execute(write_var/1).
label(wait_var/1).
  goal(wait_var/1).
  requires(3).
  try_guard_else_suspend.
  % head(wait_var(X)).
  % guard(wait(X)).
  wait(reg(in,1)).
  activate.
  % body(writeln(X)).
  tail(3).
    out_value(reg(in,1),reg(out,1)).
    execute(writeln/1).
label(write_var/1).
  goal(write_var/1).
  requires(3).
  try_guard_else_suspend.
  % head(write_var(X)).
  % guard(true).
  activate.
  % body(X=fire).
    get_constant(fire,reg(in,1)).
  proceed.
label(test_atom_concat/0).
  goal(test_atom_concat/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_atom_concat).
  % guard(true).
  activate.
  % body(test_atom_concat_1).
  par(2).
    spawn(test_atom_concat_1/0).
  % body(test_atom_concat_2).
  par(2).
    spawn(test_atom_concat_2/0).
  % body(test_atom_concat_3).
  tail(2).
    execute(test_atom_concat_3/0).
label(test_atom_concat_1/0).
  goal(test_atom_concat_1/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_concat_1).
  % guard(true).
  activate.
  % body(atom_concat(abc,def,ABCDEF)).
  par(2).
    out_constant(abc,reg(out,1)).
    out_constant(def,reg(out,2)).
    out_variable(reg(x,1),reg(out,3)).
    spawn(atom_concat/3).
  % body(write(abc + def = )).
  par(2).
    out_constant('abc + def = ',reg(out,1)).
    spawn(write/1).
  % body(write([)).
  par(2).
    out_constant('[',reg(out,1)).
    spawn(write/1).
  % body(write(ABCDEF)).
  par(2).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(writeln(])).
  tail(2).
    out_constant(']',reg(out,1)).
    execute(writeln/1).
label(test_atom_concat_2/0).
  goal(test_atom_concat_2/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_concat_2).
  % guard(true).
  activate.
  % body(atom_concat(abc,DEF,abcdef)).
  par(2).
    out_constant(abc,reg(out,1)).
    out_variable(reg(x,1),reg(out,2)).
    out_constant(abcdef,reg(out,3)).
    spawn(atom_concat/3).
  % body(write(abc + [)).
  par(2).
    out_constant('abc + [',reg(out,1)).
    spawn(write/1).
  % body(write(DEF)).
  par(2).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(writeln(] = abcdef)).
  tail(2).
    out_constant('] = abcdef',reg(out,1)).
    execute(writeln/1).
label(test_atom_concat_3/0).
  goal(test_atom_concat_3/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_concat_3).
  % guard(true).
  activate.
  % body(atom_concat(ABC,def,abcdef)).
  par(2).
    out_variable(reg(x,1),reg(out,1)).
    out_constant(def,reg(out,2)).
    out_constant(abcdef,reg(out,3)).
    spawn(atom_concat/3).
  % body(write([)).
  par(2).
    out_constant('[',reg(out,1)).
    spawn(write/1).
  % body(write(ABC)).
  par(2).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(writeln(] + def = abcdef)).
  tail(2).
    out_constant('] + def = abcdef',reg(out,1)).
    execute(writeln/1).
label(test_atom_chars/0).
  goal(test_atom_chars/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_atom_chars).
  % guard(true).
  activate.
  % body(test_atom_chars1).
  par(2).
    spawn(test_atom_chars1/0).
  % body(test_atom_chars2).
  tail(2).
    execute(test_atom_chars2/0).
label(test_atom_chars1/0).
  goal(test_atom_chars1/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_chars1).
  % guard(true).
  activate.
  % body(A=abcdefgあいうえお漢字☺🍺).
    set_variable(reg(x,2)).
    get_constant('abcdefgあいうえお漢字☺🍺',reg(x,2)).
  % body(atom_chars(A,Cs)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(x,1),reg(out,2)).
    spawn(atom_chars/2).
  % body(write(A)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write( -> )).
  par(3).
    out_constant(' -> ',reg(out,1)).
    spawn(write/1).
  % body(writeln(Cs)).
  tail(3).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_atom_chars2/0).
  goal(test_atom_chars2/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_chars2).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(atom_chars(A,Cs)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    spawn(atom_chars/2).
  % body(write(A)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write( <- )).
  par(3).
    out_constant(' <- ',reg(out,1)).
    spawn(write/1).
  % body(writeln(Cs)).
  tail(3).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_atom_codes/0).
  goal(test_atom_codes/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_atom_codes).
  % guard(true).
  activate.
  % body(test_atom_codes1).
  par(2).
    spawn(test_atom_codes1/0).
  % body(test_atom_codes2).
  tail(2).
    execute(test_atom_codes2/0).
label(test_atom_codes1/0).
  goal(test_atom_codes1/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_codes1).
  % guard(true).
  activate.
  % body(A=abcdefgあいうえお漢字☺🍺).
    set_variable(reg(x,2)).
    get_constant('abcdefgあいうえお漢字☺🍺',reg(x,2)).
  % body(atom_codes(A,Cs)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(x,1),reg(out,2)).
    spawn(atom_codes/2).
  % body(write(A)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write( -> )).
  par(3).
    out_constant(' -> ',reg(out,1)).
    spawn(write/1).
  % body(writeln(Cs)).
  tail(3).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_atom_codes2/0).
  goal(test_atom_codes2/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_atom_codes2).
  % guard(true).
  activate.
  % body(Cs=[97,98,99,100,101,102,103,227,129,130,227,129,132,227,129,134,227,129,136,227,129,138,230,188,162,229,173,151,226,152,186,240,159,141,186]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(97).
      unify_list.
      unify_constant(98).
      unify_list.
      unify_constant(99).
      unify_list.
      unify_constant(100).
      unify_list.
      unify_constant(101).
      unify_list.
      unify_constant(102).
      unify_list.
      unify_constant(103).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(130).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(132).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(134).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(136).
      unify_list.
      unify_constant(227).
      unify_list.
      unify_constant(129).
      unify_list.
      unify_constant(138).
      unify_list.
      unify_constant(230).
      unify_list.
      unify_constant(188).
      unify_list.
      unify_constant(162).
      unify_list.
      unify_constant(229).
      unify_list.
      unify_constant(173).
      unify_list.
      unify_constant(151).
      unify_list.
      unify_constant(226).
      unify_list.
      unify_constant(152).
      unify_list.
      unify_constant(186).
      unify_list.
      unify_constant(240).
      unify_list.
      unify_constant(159).
      unify_list.
      unify_constant(141).
      unify_list.
      unify_constant(186).
      unify_nil.
  % body(atom_codes(A,Cs)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    spawn(atom_codes/2).
  % body(write(A)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write( <- )).
  par(3).
    out_constant(' <- ',reg(out,1)).
    spawn(write/1).
  % body(writeln(Cs)).
  tail(3).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_append/0).
  goal(test_append/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_append).
  % guard(true).
  activate.
  % body(test_append1).
  par(2).
    spawn(test_append1/0).
  % body(test_append2).
  par(2).
    spawn(test_append2/0).
  % body(test_append3).
  tail(2).
    execute(test_append3/0).
label(test_append1/0).
  goal(test_append1/0).
  requires(7).
  try_guard_else_suspend.
  % head(test_append1).
  % guard(true).
  activate.
  % body(Xs=[a,b,c,d,e,f,g]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_nil.
  % body(Ys=[あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,2)).
    get_list(reg(x,2)).
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  par(4).
    out_value(reg(x,1),reg(out,1)).
    out_value(reg(x,2),reg(out,2)).
    out_variable(reg(x,3),reg(out,3)).
    spawn(append/3).
  % body(write(Xs)).
  par(4).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(write(+)).
  par(4).
    out_constant(+,reg(out,1)).
    spawn(write/1).
  % body(write(Ys)).
  par(4).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(=[)).
  par(4).
    out_constant('=[',reg(out,1)).
    spawn(write/1).
  % body(write(Zs)).
  par(4).
    out_value(reg(x,3),reg(out,1)).
    spawn(write/1).
  % body(writeln(])).
  tail(4).
    out_constant(']',reg(out,1)).
    execute(writeln/1).
label(test_append2/0).
  goal(test_append2/0).
  requires(7).
  try_guard_else_suspend.
  % head(test_append2).
  % guard(true).
  activate.
  % body(Xs=[a,b,c,d,e,f,g]).
    set_variable(reg(x,2)).
    get_list(reg(x,2)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_nil.
  % body(Zs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  par(4).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(x,3),reg(out,2)).
    out_value(reg(x,1),reg(out,3)).
    spawn(append/3).
  % body(write(Xs)).
  par(4).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(+)).
  par(4).
    out_constant(+,reg(out,1)).
    spawn(write/1).
  % body(write([)).
  par(4).
    out_constant('[',reg(out,1)).
    spawn(write/1).
  % body(write(Ys)).
  par(4).
    out_value(reg(x,3),reg(out,1)).
    spawn(write/1).
  % body(write(]=)).
  par(4).
    out_constant(']=',reg(out,1)).
    spawn(write/1).
  % body(writeln(Zs)).
  tail(4).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_append3/0).
  goal(test_append3/0).
  requires(7).
  try_guard_else_suspend.
  % head(test_append3).
  % guard(true).
  activate.
  % body(Ys=[あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(Zs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,2)).
    get_list(reg(x,2)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(append(Xs,Ys,Zs)).
  par(4).
    out_variable(reg(x,3),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_value(reg(x,2),reg(out,3)).
    spawn(append/3).
  % body(write([)).
  par(4).
    out_constant('[',reg(out,1)).
    spawn(write/1).
  % body(write(Xs)).
  par(4).
    out_value(reg(x,3),reg(out,1)).
    spawn(write/1).
  % body(write(]+)).
  par(4).
    out_constant(']+',reg(out,1)).
    spawn(write/1).
  % body(write(Ys)).
  par(4).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(write(=)).
  par(4).
    out_constant(=,reg(out,1)).
    spawn(write/1).
  % body(writeln(Zs)).
  tail(4).
    out_value(reg(x,2),reg(out,1)).
    execute(writeln/1).
label(test_reverse/0).
  goal(test_reverse/0).
  requires(4).
  try_guard_else_suspend.
  % head(test_reverse).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(reverse(Cs,Rs)).
  par(2).
    out_value(reg(x,1),reg(out,1)).
    out_variable(reg(x,1),reg(out,2)).
    spawn(reverse/2).
  % body(writeln(Rs)).
  tail(2).
    out_value(reg(x,1),reg(out,1)).
    execute(writeln/1).
label(test_nth0/0).
  goal(test_nth0/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_nth0).
  % guard(true).
  activate.
  % body(test_nth0_).
  par(2).
    spawn(test_nth0_/0).
  % body(test_nth0_rev_).
  tail(2).
    execute(test_nth0_rev_/0).
label(test_nth0_/0).
  goal(test_nth0_/0).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth0_).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth0(0,Cs,E0)).
  par(3).
    out_constant(0,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth0/3).
  % body(write( 0: [)).
  par(3).
    out_constant(' 0: [',reg(out,1)).
    spawn(write/1).
  % body(write(E0)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth0(1,Cs,E1)).
  par(3).
    out_constant(1,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth0/3).
  % body(write(] 1: [)).
  par(3).
    out_constant('] 1: [',reg(out,1)).
    spawn(write/1).
  % body(write(E1)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth0(2,Cs,E2)).
  par(3).
    out_constant(2,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth0/3).
  % body(write(] 2: [)).
  par(3).
    out_constant('] 2: [',reg(out,1)).
    spawn(write/1).
  % body(write(E2)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth0(3,Cs,E3)).
  par(3).
    out_constant(3,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth0/3).
  % body(write(] 3: [)).
  par(3).
    out_constant('] 3: [',reg(out,1)).
    spawn(write/1).
  % body(write(E3)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth0(4,Cs,E4)).
  par(3).
    out_constant(4,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth0/3).
  % body(write(] 4: [)).
  par(3).
    out_constant('] 4: [',reg(out,1)).
    spawn(write/1).
  % body(write(E4)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth0(5,Cs,E5)).
  par(3).
    out_constant(5,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,1),reg(out,3)).
    spawn(nth0/3).
  % body(write(] 5: [)).
  par(3).
    out_constant('] 5: [',reg(out,1)).
    spawn(write/1).
  % body(write(E5)).
  par(3).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(writeln(])).
  tail(3).
    out_constant(']',reg(out,1)).
    execute(writeln/1).
label(test_nth0_rev_/0).
  goal(test_nth0_rev_/0).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth0_rev_).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth0(N0,Cs,a)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(a,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N0)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: a)).
  par(3).
    out_constant(']: a',reg(out,1)).
    spawn(write/1).
  % body(nth0(N1,Cs,b)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(b,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N1)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: b)).
  par(3).
    out_constant(']: b',reg(out,1)).
    spawn(write/1).
  % body(nth0(N2,Cs,c)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(c,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N2)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: c)).
  par(3).
    out_constant(']: c',reg(out,1)).
    spawn(write/1).
  % body(nth0(N3,Cs,d)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(d,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N3)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: d)).
  par(3).
    out_constant(']: d',reg(out,1)).
    spawn(write/1).
  % body(nth0(N4,Cs,e)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(e,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N4)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: e)).
  par(3).
    out_constant(']: e',reg(out,1)).
    spawn(write/1).
  % body(nth0(N5,Cs,f)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(f,reg(out,3)).
    spawn(nth0/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N5)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(writeln(]: f)).
  tail(3).
    out_constant(']: f',reg(out,1)).
    execute(writeln/1).
label(test_nth1/0).
  goal(test_nth1/0).
  requires(1).
  try_guard_else_suspend.
  % head(test_nth1).
  % guard(true).
  activate.
  % body(test_nth1_).
  par(2).
    spawn(test_nth1_/0).
  % body(test_nth1_rev_).
  tail(2).
    execute(test_nth1_rev_/0).
label(test_nth1_/0).
  goal(test_nth1_/0).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth1_).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth1(1,Cs,E1)).
  par(3).
    out_constant(1,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth1/3).
  % body(write( 1: [)).
  par(3).
    out_constant(' 1: [',reg(out,1)).
    spawn(write/1).
  % body(write(E1)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth1(2,Cs,E2)).
  par(3).
    out_constant(2,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth1/3).
  % body(write(] 2: [)).
  par(3).
    out_constant('] 2: [',reg(out,1)).
    spawn(write/1).
  % body(write(E2)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth1(3,Cs,E3)).
  par(3).
    out_constant(3,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth1/3).
  % body(write(] 3: [)).
  par(3).
    out_constant('] 3: [',reg(out,1)).
    spawn(write/1).
  % body(write(E3)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth1(4,Cs,E4)).
  par(3).
    out_constant(4,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,2),reg(out,3)).
    spawn(nth1/3).
  % body(write(] 4: [)).
  par(3).
    out_constant('] 4: [',reg(out,1)).
    spawn(write/1).
  % body(write(E4)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(nth1(5,Cs,E5)).
  par(3).
    out_constant(5,reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_variable(reg(x,1),reg(out,3)).
    spawn(nth1/3).
  % body(write(] 5: [)).
  par(3).
    out_constant('] 5: [',reg(out,1)).
    spawn(write/1).
  % body(write(E5)).
  par(3).
    out_value(reg(x,1),reg(out,1)).
    spawn(write/1).
  % body(writeln(])).
  tail(3).
    out_constant(']',reg(out,1)).
    execute(writeln/1).
label(test_nth1_rev_/0).
  goal(test_nth1_rev_/0).
  requires(6).
  try_guard_else_suspend.
  % head(test_nth1_rev_).
  % guard(true).
  activate.
  % body(Cs=[a,b,c,d,e,f,g,あ,い,う,え,お,漢,字,☺,🍺]).
    set_variable(reg(x,1)).
    get_list(reg(x,1)).
      unify_constant(a).
      unify_list.
      unify_constant(b).
      unify_list.
      unify_constant(c).
      unify_list.
      unify_constant(d).
      unify_list.
      unify_constant(e).
      unify_list.
      unify_constant(f).
      unify_list.
      unify_constant(g).
      unify_list.
      unify_constant(あ).
      unify_list.
      unify_constant(い).
      unify_list.
      unify_constant(う).
      unify_list.
      unify_constant(え).
      unify_list.
      unify_constant(お).
      unify_list.
      unify_constant(漢).
      unify_list.
      unify_constant(字).
      unify_list.
      unify_constant(☺).
      unify_list.
      unify_constant(🍺).
      unify_nil.
  % body(nth1(N1,Cs,a)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(a,reg(out,3)).
    spawn(nth1/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N1)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: a)).
  par(3).
    out_constant(']: a',reg(out,1)).
    spawn(write/1).
  % body(nth1(N2,Cs,b)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(b,reg(out,3)).
    spawn(nth1/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N2)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: b)).
  par(3).
    out_constant(']: b',reg(out,1)).
    spawn(write/1).
  % body(nth1(N3,Cs,c)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(c,reg(out,3)).
    spawn(nth1/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N3)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: c)).
  par(3).
    out_constant(']: c',reg(out,1)).
    spawn(write/1).
  % body(nth1(N4,Cs,d)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(d,reg(out,3)).
    spawn(nth1/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N4)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(write(]: d)).
  par(3).
    out_constant(']: d',reg(out,1)).
    spawn(write/1).
  % body(nth1(N5,Cs,e)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    out_value(reg(x,1),reg(out,2)).
    out_constant(e,reg(out,3)).
    spawn(nth1/3).
  % body(write( [)).
  par(3).
    out_constant(' [',reg(out,1)).
    spawn(write/1).
  % body(write(N5)).
  par(3).
    out_value(reg(x,2),reg(out,1)).
    spawn(write/1).
  % body(writeln(]: e)).
  tail(3).
    out_constant(']: e',reg(out,1)).
    execute(writeln/1).
label(test_splice_suspension/0).
  goal(test_splice_suspension/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_splice_suspension).
  % guard(true).
  activate.
  % body(test_splice_suspension1(X1)).
  par(2).
    out_variable(reg(x,1),reg(out,1)).
    spawn(test_splice_suspension1/1).
  % body(test_splice_suspension1(X2)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    spawn(test_splice_suspension1/1).
  % body(test_splice_suspension1(X3)).
  par(4).
    out_variable(reg(x,3),reg(out,1)).
    spawn(test_splice_suspension1/1).
  % body(X1=X2).
    get_value(reg(x,2),reg(x,1)).
  % body(X2=X3).
    get_value(reg(x,3),reg(x,2)).
  % body(dump_to_dot(dump/splice.dot)).
  par(4).
    out_constant('dump/splice.dot',reg(out,1)).
    spawn(dump_to_dot/1).
  % body(X1=test_splice_suspension).
    get_constant(test_splice_suspension,reg(x,1)).
  proceed.
label(test_splice_suspension1/1).
  goal(test_splice_suspension1/1).
  requires(3).
  try_guard_else_suspend.
  % head(test_splice_suspension1(X)).
  % guard(wait(X)).
  wait(reg(in,1)).
  activate.
  % body(writeln(X)).
  tail(3).
    out_value(reg(in,1),reg(out,1)).
    execute(writeln/1).
label(test_calc/0).
  goal(test_calc/0).
  requires(5).
  try_guard_else_suspend.
  % head(test_calc).
  % guard(true).
  activate.
  % body(writeln(xxx0)).
  par(2).
    out_constant(xxx0,reg(out,1)).
    spawn(writeln/1).
  % body(X2:=X-1).
  par(3).
    out_variable(reg(x,1),reg(out,1)).
    out_variable(reg(x,2),reg(out,2)).
    call('__dec__'/2).
  % body(writeln(xxx1)).
  par(3).
    out_constant(xxx1,reg(out,1)).
    spawn(writeln/1).
  % body(writeln(X2:=X-1)).
  par(3).
    out_structure((:=)/2,reg(out,1)).
      write_value(reg(x,2)).
      write_structure((-)/2).
      write_value(reg(x,1)).
      write_constant(1).
    spawn(writeln/1).
  % body(X1:=X+1).
  par(3).
    out_value(reg(x,1),reg(out,1)).
    out_variable(reg(x,2),reg(out,2)).
    call('__inc__'/2).
  % body(writeln(X1:=X+1)).
  par(3).
    out_structure((:=)/2,reg(out,1)).
      write_value(reg(x,2)).
      write_structure((+)/2).
      write_value(reg(x,1)).
      write_constant(1).
    spawn(writeln/1).
  % body(writeln(xxx)).
  par(3).
    out_constant(xxx,reg(out,1)).
    spawn(writeln/1).
  % body(dump_to_dot(dump/calc.dot)).
  par(3).
    out_constant('dump/calc.dot',reg(out,1)).
    spawn(dump_to_dot/1).
  % body(X=10).
    get_constant(10,reg(x,1)).
  proceed.
label(do_test/1).
  goal(do_test/1).
  requires(3).
  try_guard_else_suspend.
  % head(do_test(X)).
  % guard(true).
  activate.
  % body(write(X)).
  seq(3).
    out_value(reg(in,1),reg(out,1)).
    call(write/1).
  % body(writeln(: )).
  seq(3).
    out_constant(': ',reg(out,1)).
    call(writeln/1).
  % body(time(X)).
  tail(3).
    out_value(reg(in,1),reg(out,1)).
    execute(time/1).
label(main/1).
  goal(main/1).
  requires(4).
  try_guard_else_suspend.
  % head(main(_12654)).
  % guard(true).
  activate.
  % body(do_test(test_otherwise)).
  seq(3).
    out_constant(test_otherwise,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_write_var)).
  seq(3).
    out_constant(test_write_var,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_write_atom)).
  seq(3).
    out_constant(test_write_atom,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_write_list)).
  seq(3).
    out_constant(test_write_list,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_write_structure)).
  seq(3).
    out_constant(test_write_structure,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_get_structure)).
  seq(3).
    out_constant(test_get_structure,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_set_structure)).
  seq(3).
    out_constant(test_set_structure,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_get_list)).
  seq(3).
    out_constant(test_get_list,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_set_list)).
  seq(3).
    out_constant(test_set_list,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_check_constant)).
  seq(3).
    out_constant(test_check_constant,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_check_list)).
  seq(3).
    out_constant(test_check_list,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_check_nil)).
  seq(3).
    out_constant(test_check_nil,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_check_structure)).
  seq(3).
    out_constant(test_check_structure,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_wait_var)).
  seq(3).
    out_constant(test_wait_var,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_atom_concat)).
  seq(3).
    out_constant(test_atom_concat,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_atom_chars)).
  seq(3).
    out_constant(test_atom_chars,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_atom_codes)).
  seq(3).
    out_constant(test_atom_codes,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_append)).
  seq(3).
    out_constant(test_append,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_reverse)).
  seq(3).
    out_constant(test_reverse,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_nth0)).
  seq(3).
    out_constant(test_nth0,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_nth1)).
  seq(3).
    out_constant(test_nth1,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_splice_suspension)).
  seq(3).
    out_constant(test_splice_suspension,reg(out,1)).
    call(do_test/1).
  % body(do_test(test_calc)).
  seq(3).
    out_constant(test_calc,reg(out,1)).
    call(do_test/1).
  % body(inference_count(Infer)).
  par(3).
    out_variable(reg(x,2),reg(out,1)).
    spawn(inference_count/1).
  % body(write(total_inferences=)).
  par(3).
    out_constant('total_inferences=',reg(out,1)).
    spawn(write/1).
  % body(writeln(Infer)).
  tail(3).
    out_value(reg(x,2),reg(out,1)).
    execute(writeln/1).

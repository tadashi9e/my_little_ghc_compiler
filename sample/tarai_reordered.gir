label(tarai/4).
  goal(tarai/4).
  requires(13).
  try_guard_else(label(tarai/4-2)).
  % head(tarai(X,Y,_116,R)).
  % guard(X=<Y).
  seq(6).
    out_value(reg(in,1),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    call((=<)/2).
  activate.
  % body(R=Y).
    get_value(reg(in,2),reg(in,4)).
  proceed.
label(tarai/4-2).
  otherwise.
  % head(tarai(X,Y,Z,R)).
  % guard(true).
  activate.
  % body(tarai(R_X,R_Y,R_Z,R)).
  par(8).
    out_variable(reg(x,7),reg(out,1)).
    out_variable(reg(x,6),reg(out,2)).
    out_variable(reg(x,5),reg(out,3)).
    out_value(reg(in,4),reg(out,4)).
    spawn(tarai/4).
  % body(X_1:=X-1).
  par(9).
    out_value(reg(in,1),reg(out,1)).
    out_variable(reg(x,8),reg(out,2)).
    call('__dec__'/2).
  % body(tarai(X_1,Y,Z,R_X)).
  par(9).
    out_value(reg(x,8),reg(out,1)).
    out_value(reg(in,2),reg(out,2)).
    out_value(reg(in,3),reg(out,3)).
    out_value(reg(x,7),reg(out,4)).
    spawn(tarai/4).
  % body(Y_1:=Y-1).
  par(9).
    out_value(reg(in,2),reg(out,1)).
    out_variable(reg(x,7),reg(out,2)).
    call('__dec__'/2).
  % body(tarai(Y_1,Z,X,R_Y)).
  par(9).
    out_value(reg(x,7),reg(out,1)).
    out_value(reg(in,3),reg(out,2)).
    out_value(reg(in,1),reg(out,3)).
    out_value(reg(x,6),reg(out,4)).
    spawn(tarai/4).
  % body(Z_1:=Z-1).
  par(9).
    out_value(reg(in,3),reg(out,1)).
    out_variable(reg(x,6),reg(out,2)).
    call('__dec__'/2).
  % body(tarai(Z_1,X,Y,R_Z)).
  tail(9).
    out_value(reg(x,6),reg(out,1)).
    out_value(reg(in,1),reg(out,2)).
    out_value(reg(in,2),reg(out,3)).
    out_value(reg(x,5),reg(out,4)).
    execute(tarai/4).
label(report/1).
  goal(report/1).
  requires(3).
  try_guard_else_suspend.
  % head(report(Ri)).
  % guard(wait(Ri)).
  wait(reg(in,1)).
  activate.
  % body(outstream([writeln(Ri)])).
  tail(3).
    out_list(reg(out,1)).
      write_structure(writeln/1).
      write_value(reg(in,1)).
      write_nil.
    execute(outstream/1).
label(main/1).
  goal(main/1).
  requires(10).
  try_guard_else(label(main/1-2)).
  % head(main([_728,X,Y,Z])).
    check_list(reg(in,1)).
      read_void.
      read_list.
      read_variable(reg(x,2)).
      read_list.
      read_variable(reg(x,3)).
      read_list.
      read_variable(reg(x,4)).
      read_nil.
  % guard(true).
  activate.
  % body(atom_number(X,Xi)).
  par(5).
    out_value(reg(x,2),reg(out,1)).
    out_variable(reg(x,2),reg(out,2)).
    spawn(atom_number/2).
  % body(atom_number(Y,Yi)).
  par(5).
    out_value(reg(x,3),reg(out,1)).
    out_variable(reg(x,3),reg(out,2)).
    spawn(atom_number/2).
  % body(atom_number(Z,Zi)).
  par(5).
    out_value(reg(x,4),reg(out,1)).
    out_variable(reg(x,4),reg(out,2)).
    spawn(atom_number/2).
  % body(report(Ri)).
  par(6).
    out_variable(reg(x,5),reg(out,1)).
    spawn(report/1).
  % body(wait_time(Ri)).
  par(6).
    out_value(reg(x,5),reg(out,1)).
    spawn(wait_time/1).
  % body(tarai(Xi,Yi,Zi,Ri)).
  tail(6).
    out_value(reg(x,2),reg(out,1)).
    out_value(reg(x,3),reg(out,2)).
    out_value(reg(x,4),reg(out,3)).
    out_value(reg(x,5),reg(out,4)).
    execute(tarai/4).
label(main/1-2).
  otherwise.
  % head(main([Prog])).
    check_list(reg(in,1)).
      read_variable(reg(x,2)).
      read_nil.
  % guard(true).
  activate.
  % body(outstream([write(usage: ),write(Prog),write( X Y Z),nl])).
  tail(6).
    out_list(reg(out,1)).
      write_structure(write/1).
      write_constant('usage: ').
      write_list.
      write_structure(write/1).
      write_value(reg(x,2)).
      write_list.
      write_structure(write/1).
      write_constant(' X Y Z').
      write_list.
      write_constant(nl).
      write_nil.
    execute(outstream/1).

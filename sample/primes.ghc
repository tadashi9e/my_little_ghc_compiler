% -*- coding:utf-8-unix; mode:prolog -*-

primes(Max, Ps) :- true | gen(2, Max, Ns), sift(Ns, Ps).
gen(N0, Max, Ns0) :-
    N0 =< Max | N1 := N0 + 1, Ns0 = [N0 | Ns1], gen(N1, Max, Ns1).
gen(N0, Max, Ns0) :-
    N0  > Max | Ns0 = [].
sift([P|Xs1], Zs0) :-
    true | Zs0 = [P | Zs1], filter(P, Xs1, Ys), sift(Ys, Zs1).
sift([], Zs0) :-
    true | Zs0 = [].
filter(P, [X|Xs1], Ys0) :-
    X mod P =\= 0 | Ys0 = [X | Ys1], filter(P, Xs1, Ys1).
filter(P, [X|Xs1], Ys0) :-
    X mod P =:= 0 | filter(P, Xs1, Ys0).
filter(_, [],      Ys0) :-
    true | Ys0 = [].

printstream(Ps) :- outstream(Stream), printstream(Ps, Stream).
printstream([], Stream) :-
    true | Stream = [].
printstream([P|Ps], Stream) :-
    true |
    Stream = [write(P) | Stream2],
    printstream_rest(Ps, Stream2).
printstream_rest([], Stream) :-
    true |
    Stream = [nl].
printstream_rest([P|Ps], Stream) :-
    true |
    Stream = [write(','), write(P) | Stream2],
    printstream_rest(Ps, Stream2).

main([_, A]) :-
    atom_number(A, N),
    time(primes(N, Primes)),
    printstream(Primes).
otherwise.
main([Prog]) :-
    outstream([write('usage: '), write(Prog), write(' <max>'), nl]).
